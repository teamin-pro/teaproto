syntax = "proto3";

package teaproto;

import "teatypes/tchats.proto";
import "teatypes/tusers.proto";

enum ChatEventType {
  TYPING = 0;
  RECORDING_AUDIO = 1;
  CHOOSING_STICKER = 2;
}

message ChatEvent {
  ChatEventType type = 1;
  string chat_id = 2;
  teatypes.User user = 6;
  uint64 stop_after = 4; // stop showing event after this time
  bool stop_now = 5; // stop showing event right now
}

message ChatEventRequest {
  oneof recipient {
    string chat_id = 2;
    string user_id = 1;
  }
  ChatEventType type = 3;
}

message ChatEventResponse {
  enum Error {
    UNKNOWN_ERROR = 0;
    INVALID_RECIPIENT_ERROR = 1;
    ACCESS_DENIED_ERROR = 2;
  }
  repeated Error errors = 1;
  ChatEvent chat_event = 2;
}

message ChatDetailsRequest {
  oneof recipient {
    string chat_id = 2;
    string user_id = 1;
  }
}

message ChatDetailsResponse {
  enum Error {
    UNKNOWN_ERROR = 0;
    INVALID_RECIPIENT_ERROR = 1;
    ACCESS_DENIED_ERROR = 2;
  }
  repeated Error errors = 1;
  teatypes.Chat chat = 2;
}

message PinChatRequest {
  oneof recipient {
    string chat_id = 2;
    string user_id = 1;
  }
  uint32 pinned_position = 3; // 0 = unpin
}

message PinChatResponse {
  enum Error {
    UNKNOWN_ERROR = 0;
    INVALID_RECIPIENT_ERROR = 1;
    ACCESS_DENIED_ERROR = 2;
  }
  repeated Error errors = 1;
  teatypes.Chat chat = 2;
}

message ChatListRequest {
  uint32 limit = 2; // default: StateResponse.max_results_on_page
  uint32 offset = 3;

  // optional filters
  repeated teatypes.ChatType chat_types = 1;
  uint64 min_updated_at = 4;
  string title = 5;
  string parent_chat_id = 6;
  repeated uint32 task_status_ids = 7;
}

message ChatListResponse {
  enum Error {
    UNKNOWN_ERROR = 0;
    INVALID_LIMIT_ERROR = 1;
    INVALID_PARENT_CHAT_ERROR = 2;
    ACCESS_DENIED_TO_PARENT_CHAT_ERROR = 3;
  }
  repeated Error errors = 2;
  repeated teatypes.Chat chats = 1; // pinned chats first, other chats sorted by activity.
}
