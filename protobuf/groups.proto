syntax = "proto3";

package gtproto;

import "core.proto";
import "users.proto";

// Roles are predefined on server side. In future we can add custom roles via API.
// Example roles:
//  * owner: can send messages, can manage members, can change group info, can set any role
//  * admin: can send messages, can manage members, can change group info, can set any role except owner
//  * member: can send messages, can add new members
message GroupRole {
  uint32 id = 1; // value is unique inside group chat
  string title = 2; // human readable title
  bool can_add_new_members = 11;
  bool can_change_information = 12; // title, icon
  bool can_delete_group = 16;
  bool can_delete_any_message = 15;
  repeated uint32 can_set_role_ids = 13;
}

message GroupMember {
  User user = 1;
  uint32 group_role_id = 6;
  bool can_i_remove_this_member = 5;
}

message CreateGroupRequest {
  string title = 1;
  repeated string user_ids = 2;
}

message CreateGroupResponse {
  enum Error {
    UNKNOWN_ERROR = 0;
    EMPTY_TITLE_ERROR = 1;
    TITLE_TOO_LONG_ERROR = 2;
    GROUP_CREATION_NOT_ALLOWED_ERROR = 3;
  }
  repeated Error errors = 1;
  Chat chat = 3;
}

message UpdateGroupRequest {
  string chat_id = 1;
  string title = 2;
}

message UpdateGroupResponse {
  enum Error {
    UNKNOWN_ERROR = 0;
    INVALID_CHAT_ERROR = 1;
    NOT_ALLOWED_TO_UPDATE_ERROR = 2;
    EMPTY_TITLE_ERROR = 3;
    TITLE_TOO_LONG_ERROR = 4;
  }
  repeated Error errors = 1;
  Chat chat = 3;
}

message GroupDetailsRequest {
  string chat_id = 1;
}

message GroupDetailsResponse {
  enum Error {
    UNKNOWN_ERROR = 0;
    INVALID_CHAT_ERROR = 1;
    ACCESS_DENIED_ERROR = 2;
  }
  repeated Error errors = 1;
  Chat chat = 3;
  repeated GroupRole group_roles = 2;
}

message GroupMembersListRequest {
  string chat_id = 1;
  uint32 limit = 2; // default: StateResponse.max_results_on_page
  uint32 offset = 3;

  // filters
  string user_id = 4; // uuid or "me"
}

message GroupMembersListResponse {
  enum Error {
    UNKNOWN_ERROR = 0;
    INVALID_CHAT_ERROR = 1;
    INVALID_LIMIT_ERROR = 2;
    INVALID_USER_ERROR = 3;
  }
  repeated Error errors = 1;
  repeated GroupMember members = 2;
}

message CreateGroupMembersRequest {
  string chat_id = 1;
  repeated string user_ids = 2;
}

message CreateGroupMembersResponse {
  enum Error {
    UNKNOWN_ERROR = 0;
    INVALID_CHAT_ERROR = 1;
    NOT_ALLOWED_TO_ADD_MEMBERS_ERROR = 2;
  }
  repeated Error errors = 1;
  repeated GroupMember members = 2;
}

message UpdateGroupMemberRequest {
  string chat_id = 1;
  string user_id = 2; // uuid or "me"
  uint32 group_role_id = 3;
}

message UpdateGroupMemberResponse {
  enum Error {
    UNKNOWN_ERROR = 0;
    INVALID_CHAT_ERROR = 1;
    INVALID_USER_ERROR = 2;
    UPDATE_GROUP_MEMBER_NOT_ALLOWED_ERROR = 3;
  }
  repeated Error errors = 1;
  GroupMember member = 2;
}

message RemoveGroupMemberRequest {
  string chat_id = 1;
  string user_id = 2; // uuid or "me"
}

message RemoveGroupMemberResponse {
  enum Error {
    UNKNOWN_ERROR = 0;
    INVALID_CHAT_ERROR = 1;
    INVALID_USER_ERROR = 2;
    REMOVE_GROUP_MEMBER_NOT_ALLOWED_ERROR = 3;
  }
  repeated Error errors = 1;
}

message DeleteGroupRequest {
  string chat_id = 1;
}

message DeleteGroupResponse {
  enum Error {
    UNKNOWN_ERROR = 0;
    INVALID_CHAT_ERROR = 1;
    NOT_ALLOWED_TO_DELETE_GROUP_ERROR = 2;
  }
  repeated Error errors = 1;
}
