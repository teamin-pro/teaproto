syntax = "proto3";

package teaproto;

import "teatypes/tboards.proto";
import "teatypes/tchats.proto";

message BoardMembersListRequest {
  // Chat ID
  string chat_id = 1;

  // Pagination limit. Default: StateResponse.max_results_on_page
  uint32 limit = 2;

  // Pagination offset. Default: 0
  uint32 offset = 3;

  // User ID. If not set, returns all members. If "me", returns current user.
  string user_id = 4;
}

message BoardMembersListResponse {
  enum Error {
    // Reserved
    UNKNOWN_ERROR = 0;

    // Invalid chat ID
    INVALID_CHAT_ERROR = 1;

    // Access to chat is denied
    ACCESS_DENIED_ERROR = 2;

    // Invalid limit
    INVALID_LIMIT_ERROR = 3;
  }

  // Errors
  repeated Error errors = 1;

  // Board members list
  repeated teatypes.BoardMember members = 2;
}

message CreateOrUpdateBoardMembersRequest {
  // Chat ID
  string chat_id = 1;

  // Board members update request
  repeated teatypes.BoardMemberUpdate members = 2;
}

message CreateOrUpdateBoardMembersResponse {
  enum Error {
    // Reserved
    UNKNOWN_ERROR = 0;

    // Invalid chat ID
    INVALID_CHAT_ERROR = 1;

    // Access to chat is denied
    ACCESS_DENIED_ERROR = 2;
  }

  // Errors
  repeated Error errors = 1;

  // Board members list
  repeated teatypes.BoardMember new_or_updated_members = 2;

  // Board chat information
  teatypes.Chat chat = 3;
}

message RemoveBoardMembersRequest {
  // Chat ID
  string chat_id = 1;

  // User IDs. UUID or "me"
  repeated string user_ids = 2;
}

message RemoveBoardMembersResponse {
  enum Error {
    // Reserved
    UNKNOWN_ERROR = 0;

    // Invalid chat ID
    INVALID_CHAT_ERROR = 1;

    // Access to chat is denied
    ACCESS_DENIED_ERROR = 2;
  }

  // Errors
  repeated Error errors = 1;

  // Board chat information
  teatypes.Chat chat = 2;
}
