syntax = "proto3";

package gtproto;

import "users.proto";
import "core.proto";

message SendMessageRequest {
  string id = 4; // optional: when present used as id for new message or for editing existing message
  oneof recipient {
    string chat_id = 2;
    string user_id = 1;
  }

  oneof content {
    string text = 3;
    string forward_id = 7;
  }

  // optional attachments
  string reply_id = 6;
  repeated string upload_ids = 5;
}

message SendMessageResponse {
  enum Error {
    UNKNOWN_ERROR = 0;
    INVALID_MESSAGE_ID_ERROR = 1;
    INVALID_RECIPIENT_ERROR = 2;
    MESSAGE_TEXT_TOO_LONG_ERROR = 3; // see StateResponse.max_message_length
    MESSAGE_IS_EMPTY_ERROR = 4; // message must have text, uploads or forward_id
    TOO_MANY_UPLOADS_ERROR = 5; // see StateResponse.max_uploads_for_message
    INVALID_FORWARDED_MESSAGE_ERROR = 7;
    INVALID_REPLIED_MESSAGE_ERROR = 8; // message must be from the same chat
  }
  repeated Error errors = 1;
  string errors_hint = 3; // optional human readable error description
  Message message = 2;
}

message MessagesListRequest {
  message LatestFilter {
    oneof recipient {
      string chat_id = 1;
      string user_id = 2;
    }
    uint32 limit = 3; // default: StateResponse.max_results_on_page
  }

  message ScrollFilter {
    oneof recipient {
      string chat_id = 1;
      string user_id = 2;
    }
    string message_id = 6;
    uint32 new_messages_limit = 4;
    uint32 old_messages_limit = 5;
  }

  oneof filter {
    LatestFilter latest = 3;
    ScrollFilter scroll = 4;
  }

  // filters
  bool only_with_uploads = 6;
  bool skip_system_messages = 7;
}

message MessagesListResponse {
  enum Error {
    UNKNOWN_ERROR = 0;
    INVALID_RECIPIENT_ERROR = 1;
    INVALID_MESSAGE_ID_ERROR = 2;
    INVALID_LIMIT_ERROR = 3;
  }
  repeated Error errors = 1;

  repeated Message messages = 2;
}

message MessageDetailsRequest {
  string id = 1;
}

message MessageDetailsResponse {
  enum Error {
    UNKNOWN_ERROR = 0;
    INVALID_MESSAGE_ID_ERROR = 1;
  }
  repeated Error errors = 1;
  Message message = 2;
}

message ViewedMessage {
  string message_id = 1;
  string chat_id = 2;
  uint32 viewed_counter = 3; // how many recipients viewed this message
}

message ViewMessageRequest {
  string message_id = 1;
}

message ViewMessageResponse {
  enum Error {
    UNKNOWN_ERROR = 0;
    INVALID_MESSAGE_ID_ERROR = 1;
  }
  repeated Error errors = 1;
  repeated ViewedMessage viewed_messages = 3; // viewed messages list
  ChatBadge badge = 4;  // number of unseen messages
}

message MessageViewersRequest {
  string message_id = 1;
  uint32 limit = 2; // default: StateResponse.max_results_on_page
  uint32 offset = 3;
}

message MessageViewersResponse {
  enum Error {
    UNKNOWN_ERROR = 0;
    INVALID_MESSAGE_ID_ERROR = 1;
    INVALID_LIMIT_ERROR = 2;
  }
  repeated Error errors = 1;
  repeated User users = 3;
}
