syntax = "proto3";

package gtproto;

import "commands.proto";
import "commons.proto";
import "system_messages.proto";
import "uploads.proto";
import "users.proto";

enum ChatType {
  UNKNOWN_CHAT_TYPE = 0;
  DIRECT = 1;
  GROUP = 2;
  TASK = 3;
  BOARD = 4;
}

message Group {
  string title = 2;
  Icon icon = 3;
  uint32 num_members = 4; // read only computed field
}

message Task {
  uint32 number = 3; // Unique task number in the list. Shows only when board prefix is set.

  User creator = 4; // user who created the Task
  repeated User assignees = 5; // users who are assigned to the Task. See: StateResponse.max_task_assignees

  string title = 6; // one of the title or description must be set
  string description = 7; // one of the title or description must be set
  uint32 task_status_id = 8;

  uint64 created_at = 9;
}

message Board {
  string title = 1;
  Icon icon = 2;
  uint32 num_members = 3; // read only computed field
}

message Chat {
  string id = 1;
  ChatType type = 2;

  string parent_id = 8; // optional, present only for task chats
  ChatType parent_type = 9;

  string title = 6;
  Icon icon = 7;

  oneof topic {
    User user = 15; // for type = DIRECT
    Group group = 16; // for type = GROUP
    Task task = 18; // for type == TASK
    Board board = 19; // for type == BOARD
  }

  ChatState state = 17;  // present only for chats in chat list and for chat details
}

// Chat details related to current member
message ChatState {
  Message last_message = 8; // can be empty
  uint64 updated_at = 9; // last message creation time even message was deleted
  string last_viewed_message_id = 10; // optional
  uint64 last_viewed_message_created_at = 13; // optional
  ChatBadge badge = 14;
  uint32 pinned_position = 12; // pinned position at chat list, if any
  repeated Command bot_commands = 15;

  reserved 1 to 7, 11;
}

message MessageReaction {
  string emoji = 1;
  uint32 count = 2; // total count of reactions
  bool is_my = 3; // is my reaction
  repeated User users = 4; // users who reacted with this emoji
}

message Message {
  string chat_id = 16; // actually need only for push notifications and websocket events but present in all messages for consistency
  string id = 1;
  uint64 created_at = 3;
  uint64 edited_at = 9; // Time when message was edited by author. It happens only on text / uploads / reply / forwards change. When equal to created_at, message was not edited.
  User sender = 5; // Sender of message. If empty, message was sent by system
  oneof content {
    string text = 4;
    ChatMessage forward = 13;
    SystemMessage system_message = 17;
  }
  string prev_message_id = 6; // If empty, message is first in chat
  uint32 viewed_counter = 7; // How many recipients viewed this message

  // attachments
  Message reply = 12;
  repeated Upload uploads = 11;
  repeated MessageReaction reactions = 14;

  // rights
  bool can_i_edit_this_message = 15; // message can be edited by author except for messages to bots

  reserved 2, 8, 10;
}

// Message with full chat info. For forwarded, search results etc
message ChatMessage {
  Chat chat = 1;
  Message message = 2;
}

message ChatBadge {
  string chat_id = 1; // omited when ChatBadge is used inside Chat
  uint32 counter = 2;
  uint64 updated_at = 3; // in conflicting cases, the badge with the latest updated_at should be used
}

enum BadgeType {
  BADGE_TYPE_MAIN = 0; // badge on application icon
}

message GlobalBadge {
  BadgeType type = 1;
  uint32 counter = 2;
  uint64 updated_at = 3; // in conflicting cases, the badge with the latest updated_at should be used
}

message BadgeRequest {}

message BadgeResponse {
  repeated GlobalBadge global_badges = 1;
}
