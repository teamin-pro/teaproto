syntax = "proto3";

package teaproto;

import "core.proto";
import "core_tasks.proto";

message TaskPositionUpdate {
  string chat_id = 1;
  oneof position {
    string after_task_id = 2;
    string before_task_id = 3;
    // Add a task to the beginning (top) of the task list by status
    bool beggining = 4;
    // Add a task to the end (bottom) of the task list by status
    bool end = 5;
  }
}

message CreateTaskRequest {
  string parent_chat_id = 1;
  string title = 2;
  string description = 3;
  repeated TaskMemberUpdate members = 5;
  TaskPositionUpdate position = 6;
}

message CreateTaskResponse {
  enum Error {
    UNKNOWN_ERROR = 0;
    INVALID_PARENT_CHAT_ERROR = 1;
    TITLE_AND_DESCRIPTION_EMPTY_ERROR = 2;
    TITLE_IS_TOO_LONG_ERROR = 3; // see: StateResponse.max_task_title_length
    DESCRIPTION_IS_TOO_LONG_ERROR = 4; // see: StateResponse.max_task_description_length
    TOO_MANY_TASK_MEMBERS = 5; // see: StateResponse.max_task_members
    NOT_ALLOWED_TO_CREATE_TASK_ERROR = 6;
  }
  repeated Error errors = 1;
  Chat chat = 2;
  // A list of tasks that were updated
  // Usually, tasks are updated when their positoin changed due to the newly created task
  repeated Chat updatedChats = 3;
  // TODO: create from message
}

message UpdateTaskRequest {
  string chat_id = 1;

  bool update_title = 2;
  string title = 3;

  bool update_description = 4;
  string description = 5;

  uint32 task_status_id = 7;
  // New task position
  // It should be set when the `task_status_id` changes. Otherwise, position value might be outdated and incorrect\
  TaskPositionUpdate position = 8;
}

message UpdateTaskResponse {
  enum Error {
    UNKNOWN_ERROR = 0;
    INVALID_CHAT_ERROR = 1;
    ACCESS_DENIED_ERROR = 2;
    TITLE_IS_TOO_LONG_ERROR = 3; // see: StateResponse.max_task_title_length
    DESCRIPTION_IS_TOO_LONG_ERROR = 4; // see: StateResponse.max_task_description_length
    INVALID_TASK_STATUS_ID_ERROR = 7;
    TITLE_AND_DESCRIPTION_EMPTY_ERROR = 5;
  }
  repeated Error errors = 1;
  Chat chat = 2;
  repeated Chat updatedChats = 3;
}

message DeleteTaskRequest {
  string chat_id = 1;
}

message DeleteTaskResponse {
  enum Error {
    UNKNOWN_ERROR = 0;
    INVALID_CHAT_ERROR = 1;
    ACCESS_DENIED_ERROR = 2;
  }
  repeated Error errors = 1;
}
