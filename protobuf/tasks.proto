syntax = "proto3";

package gtproto;

import "core.proto";
import "users.proto";

message TaskStatus {
  uint32 id = 1; // unique id of the status on the board
  uint32 sort_order = 2;
  string title = 3; // for example: "To Do", "In Progress", "Done".
}

message TaskRole {
  uint32 id = 1; // value is unique inside group chat
  string title = 2; // human readable title
}

message TaskMember {
  User user = 1;
  uint32 task_role_id = 4;
}

message TaskListRequest {
  string parent_chat_id = 1; // any task should have a parent chat for now
  repeated uint32 task_status_ids = 2; // if empty, all statuses are returned
  uint32 limit = 4; // default: StateResponse.max_results_on_page
  uint32 offset = 5;
}

message TaskListResponse {
  enum Error {
    UNKNOWN_ERROR = 0;
    INVALID_CHAT_ERROR = 1;
    ACCESS_DENIED_ERROR = 3;
    INVALID_LIMIT_ERROR = 2;
  }
  repeated Error errors = 1;
  repeated Chat chats = 2;
}

message TaskMemberParams {
  string user_id = 1; // uuid or "me"
  bool is_assignee = 2;
}

message CreateTaskRequest {
  string parent_chat_id = 1;
  string title = 2;
  string description = 3;
  repeated TaskMemberParams member_params = 5;
}

message CreateTaskResponse {
  enum Error {
    UNKNOWN_ERROR = 0;
    INVALID_PARENT_CHAT_ERROR = 1;
    TITLE_AND_DESCRIPTION_EMPTY_ERROR = 2;
    TITLE_IS_TOO_LONG_ERROR = 3; // see: StateResponse.max_task_title_length
    DESCRIPTION_IS_TOO_LONG_ERROR = 4; // see: StateResponse.max_task_description_length
    TOO_MANY_TASK_MEMBERS = 5; // see: StateResponse.max_task_members
    NOT_ALLOWED_TO_CREATE_TASK_ERROR = 6;
  }
  repeated Error errors = 1;
  Chat chat = 2;
  repeated TaskMember members = 3;
}

message UpdateTaskRequest {
  string chat_id = 1;

  bool update_title = 2;
  string title = 3;

  bool update_description = 4;
  string description = 5;

  bool update_task_status_id = 6;
  uint32 task_status_id = 7;

  repeated TaskMemberParams member_params = 8;
  repeated string remove_members = 9;
}

message UpdateTaskResponse {
  enum Error {
    UNKNOWN_ERROR = 0;
    INVALID_CHAT_ERROR = 1;
    NOT_ALLOWED_TO_UPDATE_TASK_ERROR = 2;
    TITLE_IS_TOO_LONG_ERROR = 3; // see: StateResponse.max_task_title_length
    DESCRIPTION_IS_TOO_LONG_ERROR = 4; // see: StateResponse.max_task_description_length
    TITLE_AND_DESCRIPTION_EMPTY_ERROR = 5;
    NOT_ALLOWED_TO_UPDATE_TASK_MEMBERS_ERROR = 6;
  }
  repeated Error errors = 1;
  Chat chat = 2;
  repeated TaskMember members = 3;
}

message DeleteTaskRequest {
  string chat_id = 1;
}

message DeleteTaskResponse {
  enum Error {
    UNKNOWN_ERROR = 0;
    INVALID_CHAT_ERROR = 1;
    NOT_ALLOWED_TO_DELETE_TASK_ERROR = 2;
  }
  repeated Error errors = 1;
}

message TaskMemberListRequest {
  string chat_id = 1;
}

message TaskMemberListResponse {
  enum Error {
    UNKNOWN_ERROR = 0;
    INVALID_CHAT_ERROR = 1;
  }
  repeated Error errors = 1;
  repeated TaskMember members = 2;
}

message RemoveTaskMemberRequest {
  string chat_id = 1;
  string user_id = 2; // uuid or "me"
}

message RemoveTaskMemberResponse {
  enum Error {
    UNKNOWN_ERROR = 0;
    INVALID_CHAT_ERROR = 1;
    INVALID_USER_ERROR = 2;
    REMOVE_TASK_MEMBER_NOT_ALLOWED_ERROR = 3;
  }
  repeated Error errors = 1;
}
