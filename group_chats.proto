syntax = "proto3";

package gtproto;

import "commons.proto";
import "messages.proto";
import "users.proto";

message GroupChatMember {
  User user = 1;
  bool is_admin = 2;

  bool can_i_remove_this_member = 5;

  bool can_this_member_add_new_members = 6;
  bool can_this_member_change_group_information = 7;
  bool can_this_member_change_group_admins = 8;
}

message CreateGroupChatRequest {
  string title = 1;
  repeated string user_ids = 2;
}

message CreateGroupChatResponse {
  enum Error {
    UNKNOWN_ERROR = 0;
    EMPTY_TITLE = 1;
    TITLE_TOO_LONG = 2;
    CREATION_NOT_ALLOWED = 3;
  }
  repeated Error errors = 1;
  Chat chat = 3;
}

message UpdateGroupChatSettingsRequest {
  string chat_id = 1;
  string title = 2;
}

message UpdateGroupChatSettingsResponse {
  enum Error {
    UNKNOWN_ERROR = 0;
    INVALID_CHAT_ERROR = 1;
    NOT_ALLOWED_ERROR = 2;
    EMPTY_TITLE_ERROR = 3;
    TITLE_TOO_LONG_ERROR = 4;
  }
  repeated Error errors = 1;
  Chat chat = 3;
}

message GroupChatMembersListRequest {
  string chat_id = 1;
  uint32 limit = 2; // default: StateResponse.max_results_on_page
  uint32 offset = 3;

  // filters
  string user_id = 4; // uuid or "me"
  bool admins_only = 5;
}

message GroupChatMembersListResponse {
  enum Error {
    UNKNOWN_ERROR = 0;
    INVALID_CHAT_ERROR = 1;
    INVALID_LIMIT_ERROR = 2;
  }
  repeated Error errors = 1;
  repeated GroupChatMember members = 2;
}

message DeleteGroupChatMemberRequest {
  string chat_id = 1;
  string user_id = 2; // uuid or "me"
}

message DeleteGroupChatMemberResponse {
  enum Error {
    UNKNOWN_ERROR = 0;
    INVALID_CHAT_ERROR = 1;
    INVALID_USER_ERROR = 2;
    NOT_ALLOWED_ERROR = 3;
  }
  repeated Error errors = 1;
}

message CreateGroupChatMembersRequest {
  string chat_id = 1;
  repeated string user_ids = 2;
}

message CreateGroupChatMembersResponse {
  enum Error {
    UNKNOWN_ERROR = 0;
    INVALID_CHAT_ERROR = 1;
    NOT_ALLOWED_ERROR = 2;
  }
  repeated Error errors = 1;
  repeated GroupChatMember members = 2;
}

message UpdateGroupChatMemberRequest {
  string chat_id = 1;
  string user_id = 2; // uuid or "me"

  Switch is_admin = 3;
  Switch can_this_member_add_new_members = 6;
  Switch can_this_member_change_group_information = 7;
  Switch can_this_member_change_group_admins = 8;
}

message UpdateGroupChatMemberResponse {
  enum Error {
    UNKNOWN_ERROR = 0;
    INVALID_CHAT_ERROR = 1;
    NOT_ALLOWED_ERROR = 2;
  }
  repeated Error errors = 1;
  GroupChatMember member = 2;
}
