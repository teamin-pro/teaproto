{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to GTProto Extensible protocol for GTNode and client. Based on protobuf over HTTP(s) and WebSocket. GRPC is not used. To use the gtproto protocol, start by referring to the protobuf/actions.proto file.","title":"Home"},{"location":"#welcome-to-gtproto","text":"Extensible protocol for GTNode and client. Based on protobuf over HTTP(s) and WebSocket. GRPC is not used. To use the gtproto protocol, start by referring to the protobuf/actions.proto file.","title":"Welcome to GTProto"},{"location":"01-basics/","text":"Basic usage Synchronous workflow (for actions) To initiate a synchronous workflow for actions: The client must send a ClientRequest message via a POST HTTP request to the endpoint https://api.gamarjoba.team/ The server responds with a ServerResponse message. Asynchronous workflow (for events) To initiate an asynchronous workflow for events: The client must create a WebSocket connection to the endpoint https://api.gamarjoba.team/ws. The client sends a WebsocketAuthRequest message. The server starts sending WebsocketEvent messages. Notes Timestamps are encoded in uint64 format and represent milliseconds in UTC. All IDs are represented as strings using the uuid format. JSON support For command line tools, it is easier to use JSON instead of protobuf. To use JSON, simply set Content-Type header to application/json and send the JSON representation of the protobuf message. If content type is omitted and request starts with { (without leading spaces) it will be treated as JSON. Getting server info This is simplest request. It does not require authentication and returns server info. curl -X POST https://api.gamarjoba.team/ \\ -H 'Content-Type: application/json' \\ -d '{\"stateRequest\":{}}' If request is JSON, response also will be JSON: { \"stateResponse\": { \"now\": \"1679507631905\", \"maxResultsOnPage\": 100, \"maxGroupTitleLength\": 40, \"maxUsernameLength\": 25, \"maxMessageLength\": 5000, \"maxFileSize\": 524288000, \"maxUploadsForMessage\": 10, \"minIconSize\": 256 } } Sending a message to a chat More useful example. This request requires authentication and sends a message to a chat. curl -X POST https://api.gamarjoba.team/ \\ -H 'Content-Type: application/json' \\ -d '{\"token\":\"<TOKEN>\",\"actions\":[{\"sendMessageRequest\":{\"chatId\":\"<CHAT_ID>\",\"text\":\"<MESSAGE_TEXT>\"}}]}'","title":"Basic usage"},{"location":"01-basics/#basic-usage","text":"","title":"Basic usage"},{"location":"01-basics/#synchronous-workflow-for-actions","text":"To initiate a synchronous workflow for actions: The client must send a ClientRequest message via a POST HTTP request to the endpoint https://api.gamarjoba.team/ The server responds with a ServerResponse message.","title":"Synchronous workflow (for actions)"},{"location":"01-basics/#asynchronous-workflow-for-events","text":"To initiate an asynchronous workflow for events: The client must create a WebSocket connection to the endpoint https://api.gamarjoba.team/ws. The client sends a WebsocketAuthRequest message. The server starts sending WebsocketEvent messages.","title":"Asynchronous workflow (for events)"},{"location":"01-basics/#notes","text":"Timestamps are encoded in uint64 format and represent milliseconds in UTC. All IDs are represented as strings using the uuid format.","title":"Notes"},{"location":"01-basics/#json-support","text":"For command line tools, it is easier to use JSON instead of protobuf. To use JSON, simply set Content-Type header to application/json and send the JSON representation of the protobuf message. If content type is omitted and request starts with { (without leading spaces) it will be treated as JSON.","title":"JSON support"},{"location":"01-basics/#getting-server-info","text":"This is simplest request. It does not require authentication and returns server info. curl -X POST https://api.gamarjoba.team/ \\ -H 'Content-Type: application/json' \\ -d '{\"stateRequest\":{}}' If request is JSON, response also will be JSON: { \"stateResponse\": { \"now\": \"1679507631905\", \"maxResultsOnPage\": 100, \"maxGroupTitleLength\": 40, \"maxUsernameLength\": 25, \"maxMessageLength\": 5000, \"maxFileSize\": 524288000, \"maxUploadsForMessage\": 10, \"minIconSize\": 256 } }","title":"Getting server info"},{"location":"01-basics/#sending-a-message-to-a-chat","text":"More useful example. This request requires authentication and sends a message to a chat. curl -X POST https://api.gamarjoba.team/ \\ -H 'Content-Type: application/json' \\ -d '{\"token\":\"<TOKEN>\",\"actions\":[{\"sendMessageRequest\":{\"chatId\":\"<CHAT_ID>\",\"text\":\"<MESSAGE_TEXT>\"}}]}'","title":"Sending a message to a chat"},{"location":"02-auth/","text":"Authentication By password StateResponse.auth_methods must contain EMAIL_PASSWORD_AUTH_METHOD send EmailPasswordAuthResponse with email and password fields By one-time code StateResponse.auth_methods must contain EMAIL_CODE_AUTH_METHOD send EmailCodeAuthRequest with email field server will send email with code to email address send EmailCodeAuthConfirmRequest with email and code fields","title":"Authentication"},{"location":"02-auth/#authentication","text":"","title":"Authentication"},{"location":"02-auth/#by-password","text":"StateResponse.auth_methods must contain EMAIL_PASSWORD_AUTH_METHOD send EmailPasswordAuthResponse with email and password fields","title":"By password"},{"location":"02-auth/#by-one-time-code","text":"StateResponse.auth_methods must contain EMAIL_CODE_AUTH_METHOD send EmailCodeAuthRequest with email field server will send email with code to email address send EmailCodeAuthConfirmRequest with email and code fields","title":"By one-time code"},{"location":"90-faq/","text":"FAQ Why use own protocol not XMPP? Firstly, creating own protocol can offer more flexibility and customization options for the app developers. They can design the protocol to specifically fit the needs of their app and its features, which may not be possible with a standardized protocol like XMPP. This can allow for faster innovation and development of new features. Secondly, using a proprietary protocol can provide greater control over the security and privacy of the messaging app. By designing their own protocol, the app developers can implement security measures that may not be possible with a standardized protocol. This can help to prevent unauthorized access to user data, protect user privacy, and prevent malicious attacks.","title":"FAQ"},{"location":"90-faq/#faq","text":"","title":"FAQ"},{"location":"90-faq/#why-use-own-protocol-not-xmpp","text":"Firstly, creating own protocol can offer more flexibility and customization options for the app developers. They can design the protocol to specifically fit the needs of their app and its features, which may not be possible with a standardized protocol like XMPP. This can allow for faster innovation and development of new features. Secondly, using a proprietary protocol can provide greater control over the security and privacy of the messaging app. By designing their own protocol, the app developers can implement security measures that may not be possible with a standardized protocol. This can help to prevent unauthorized access to user data, protect user privacy, and prevent malicious attacks.","title":"Why use own protocol not XMPP?"},{"location":"CHANGELOG/","text":"v1.15.2 documentation added v1.15.1 SystemMessage.GroupIconChanged was added v1.15.0 message deletion v1.13.1 ServerResponse.INTERNAL_SERVER_ERROR v1.13.0 UploadGroupIcon / UploadProfileIcon replaced with UploadIcon v1.12.0 audio messages support v1.11.0 chat_badges + global_badge in SendMessageResponse and ViewMessageResponse v1.10.0 ClientRequest.Actions / ServerResponse.Results was added v1.9.0 ClientRequest allow multiple actions in one request for each action type StateResponse.max_actions_in_one_request was added SendMessageListRequest removed, use SendMessageRequests TOO_MANY_MESSAGES_IN_LIST_ERROR removed in favor of MAX_ACTIONS_IN_ONE_REQUEST_ERROR INVALID_ACTION_ERROR replaced with NO_ACTIONS_IN_REQUEST_ERROR v1.8.2 SendMessageListRequest restrictions were added: no more than StateResponse.max_results_on_page allowed v1.8.1 MessageViewersRequest parameters limit and offset were added v1.8.0 Message.system_message was added all .proto files were moved to protobuf folder experimental field SendMessageResponse.errors_hint was added MessagesListRequest.skip_system_messages filter v1.7.0 ChatMemberXXX messages renamed to GroupMemberXXX GroupChatMemberDetailsRequest removed, use GroupMembersListResponse with filter user_id introduced group roles: available in GroupMembersListResponse.roles and GroupRolesResponse.roles UpdateGroupMemberRequest for changing member role StateResponse.gtproto_version was added v1.6.0 SendMessageListRequest was added. Useful for forwarding and resending messages v1.5.0 StateResponse.push_notifications_enabled was added. It's true when push notifications are enabled for current server StateResponse.auth_methods , StateResponse.min_password_length and StateResponse.max_password_length Profile.has_password SetPasswordRequest , SetEmailRequest and SetEmailConfirmationRequest v1.4.5 SetMessageReactionResponse now contains recent and default_reaction fields like ReactionsResponse v1.4.4 UsersListRequest extended with filters: only_bots , only_online , only_my_contacts v1.4.3 UploadRequest.as_file was renamed to UploadRequest.disable_modifications v1.4.2 ReactionsResponse.default_reaction was added v1.4.1 Device.disable_pushes_when_online field v1.4.0 bot commands were added ChatContext was renamed to ChatState v1.3.0 CreateGroupRequest / UpdateGroupSettingsRequest now returns Chat object Group.chat_id removed because group is always part of chat removed GroupDetailsRequest , use ChatDetailsRequest removed GroupListRequest , use ChatListRequest CreateGroupXXX renamed to CreateGroupChatXXX UpdateGroupSettingsXXX renamed to UpdateGroupChatSettingsXXX Chat / ShortChat pair replaced with Chat that have optional ChatContext field. LastMessage , Badge and other fields moved to the ChatContext v1.2.2 Chat and ShortChat have new field topic with User or Group inside v1.2.1 Chat.with_user_id replaced with Chat.with_user v1.2.0 OnlineStatus was added v1.1.2 ChatListRequest.min_updated_at was added v1.1.1 Badge was renamed to GlobalBadge ChatBadge.badge was renamed to ChatBadge.counter , and ChatBadge.updated_at added Chat.badge and ViewMessageResponse.badge now returns ChatBadge not uint32 v1.1.0 global badges v1.0.0 changelog was added Chat.chat_type was renamed to just Chat.type added new type ChatMessage . Currently only used for forwarded messages forwards api was stabilized","title":"Changelog"},{"location":"CHANGELOG/#v1152","text":"documentation added","title":"v1.15.2"},{"location":"CHANGELOG/#v1151","text":"SystemMessage.GroupIconChanged was added","title":"v1.15.1"},{"location":"CHANGELOG/#v1150","text":"message deletion","title":"v1.15.0"},{"location":"CHANGELOG/#v1131","text":"ServerResponse.INTERNAL_SERVER_ERROR","title":"v1.13.1"},{"location":"CHANGELOG/#v1130","text":"UploadGroupIcon / UploadProfileIcon replaced with UploadIcon","title":"v1.13.0"},{"location":"CHANGELOG/#v1120","text":"audio messages support","title":"v1.12.0"},{"location":"CHANGELOG/#v1110","text":"chat_badges + global_badge in SendMessageResponse and ViewMessageResponse","title":"v1.11.0"},{"location":"CHANGELOG/#v1100","text":"ClientRequest.Actions / ServerResponse.Results was added","title":"v1.10.0"},{"location":"CHANGELOG/#v190","text":"ClientRequest allow multiple actions in one request for each action type StateResponse.max_actions_in_one_request was added SendMessageListRequest removed, use SendMessageRequests TOO_MANY_MESSAGES_IN_LIST_ERROR removed in favor of MAX_ACTIONS_IN_ONE_REQUEST_ERROR INVALID_ACTION_ERROR replaced with NO_ACTIONS_IN_REQUEST_ERROR","title":"v1.9.0"},{"location":"CHANGELOG/#v182","text":"SendMessageListRequest restrictions were added: no more than StateResponse.max_results_on_page allowed","title":"v1.8.2"},{"location":"CHANGELOG/#v181","text":"MessageViewersRequest parameters limit and offset were added","title":"v1.8.1"},{"location":"CHANGELOG/#v180","text":"Message.system_message was added all .proto files were moved to protobuf folder experimental field SendMessageResponse.errors_hint was added MessagesListRequest.skip_system_messages filter","title":"v1.8.0"},{"location":"CHANGELOG/#v170","text":"ChatMemberXXX messages renamed to GroupMemberXXX GroupChatMemberDetailsRequest removed, use GroupMembersListResponse with filter user_id introduced group roles: available in GroupMembersListResponse.roles and GroupRolesResponse.roles UpdateGroupMemberRequest for changing member role StateResponse.gtproto_version was added","title":"v1.7.0"},{"location":"CHANGELOG/#v160","text":"SendMessageListRequest was added. Useful for forwarding and resending messages","title":"v1.6.0"},{"location":"CHANGELOG/#v150","text":"StateResponse.push_notifications_enabled was added. It's true when push notifications are enabled for current server StateResponse.auth_methods , StateResponse.min_password_length and StateResponse.max_password_length Profile.has_password SetPasswordRequest , SetEmailRequest and SetEmailConfirmationRequest","title":"v1.5.0"},{"location":"CHANGELOG/#v145","text":"SetMessageReactionResponse now contains recent and default_reaction fields like ReactionsResponse","title":"v1.4.5"},{"location":"CHANGELOG/#v144","text":"UsersListRequest extended with filters: only_bots , only_online , only_my_contacts","title":"v1.4.4"},{"location":"CHANGELOG/#v143","text":"UploadRequest.as_file was renamed to UploadRequest.disable_modifications","title":"v1.4.3"},{"location":"CHANGELOG/#v142","text":"ReactionsResponse.default_reaction was added","title":"v1.4.2"},{"location":"CHANGELOG/#v141","text":"Device.disable_pushes_when_online field","title":"v1.4.1"},{"location":"CHANGELOG/#v140","text":"bot commands were added ChatContext was renamed to ChatState","title":"v1.4.0"},{"location":"CHANGELOG/#v130","text":"CreateGroupRequest / UpdateGroupSettingsRequest now returns Chat object Group.chat_id removed because group is always part of chat removed GroupDetailsRequest , use ChatDetailsRequest removed GroupListRequest , use ChatListRequest CreateGroupXXX renamed to CreateGroupChatXXX UpdateGroupSettingsXXX renamed to UpdateGroupChatSettingsXXX Chat / ShortChat pair replaced with Chat that have optional ChatContext field. LastMessage , Badge and other fields moved to the ChatContext","title":"v1.3.0"},{"location":"CHANGELOG/#v122","text":"Chat and ShortChat have new field topic with User or Group inside","title":"v1.2.2"},{"location":"CHANGELOG/#v121","text":"Chat.with_user_id replaced with Chat.with_user","title":"v1.2.1"},{"location":"CHANGELOG/#v120","text":"OnlineStatus was added","title":"v1.2.0"},{"location":"CHANGELOG/#v112","text":"ChatListRequest.min_updated_at was added","title":"v1.1.2"},{"location":"CHANGELOG/#v111","text":"Badge was renamed to GlobalBadge ChatBadge.badge was renamed to ChatBadge.counter , and ChatBadge.updated_at added Chat.badge and ViewMessageResponse.badge now returns ChatBadge not uint32","title":"v1.1.1"},{"location":"CHANGELOG/#v110","text":"global badges","title":"v1.1.0"},{"location":"CHANGELOG/#v100","text":"changelog was added Chat.chat_type was renamed to just Chat.type added new type ChatMessage . Currently only used for forwarded messages forwards api was stabilized","title":"v1.0.0"}]}