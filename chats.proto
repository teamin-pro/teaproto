syntax = "proto3";

package gtproto;

import "commons.proto";
import "messages.proto";
import "users.proto";
import "badges.proto";

message Chat {
  Message last_message = 8; // optional
  uint64 updated_at = 9; // last message creation time even message was deleted
  string last_viewed_message_id = 10; // optional
  uint64 last_viewed_message_created_at = 13; // optional
  ChatBadge badge = 14;
  uint32 pinned_position = 12;  // pinned position at chat list, if any

  // same as messages.proto:ShortChat
  string id = 1;
  string title = 6;
  Icon icon = 7;
  ChatType type = 2;
  oneof topic {
    User user = 15; // for type = DIRECT
    Group group = 16; // for type = GROUP
  }
}

enum ChatEventType {
  TYPING = 0;
  RECORDING_AUDIO = 1;
  CHOOSING_STICKER = 2;
}

message ChatEvent {
  ChatEventType type = 1;
  string chat_id = 2;
  User user = 6;
  uint64 stop_after = 4; // stop showing event after this time
  bool stop_now = 5; // stop showing event right now
}

message ChatDetailsRequest {
  oneof recipient {
    string chat_id = 2;
    string user_id = 1;
  }
}

message ChatDetailsResponse {
  enum Error {
    UNKNOWN_ERROR = 0;
    INVALID_RECIPIENT_ERROR = 1;
  }
  repeated Error errors = 1;
  Chat chat = 2;
}

message PinChatRequest {
  oneof recipient {
    string chat_id = 2;
    string user_id = 1;
  }
  uint32 pinned_position = 3; // 0 = unpin
}

message PinChatResponse {
  enum Error {
    UNKNOWN_ERROR = 0;
    INVALID_RECIPIENT_ERROR = 1;
  }
  repeated Error errors = 1;
  Chat chat = 2;
}

message ChatListRequest {
  repeated ChatType chat_types = 1; // if empty, all chats are returned
  uint32 limit = 2; // default: StateResponse.max_results_on_page
  uint32 offset = 3;
  uint64 min_updated_at = 4; // optional
}

message ChatListResponse {
  enum Error {
    UNKNOWN_ERROR = 0;
    INVALID_LIMIT_ERROR = 1;
  }
  repeated Error errors = 2;
  repeated Chat chats = 1; // pinned chats first, other chats sorted by activity.
}

message ChatEventRequest {
  oneof recipient {
    string chat_id = 2;
    string user_id = 1;
  }
  ChatEventType type = 3;
}

message ChatEventResponse {
  enum Error {
    UNKNOWN_ERROR = 0;
    INVALID_RECIPIENT_ERROR = 1;
  }
  repeated Error errors = 1;
  ChatEvent chat_event = 2;
}

message Group {
  string chat_id = 1;
  string title = 2;
  Icon icon = 3;
  uint32 num_members = 4;
}

message CreateGroupRequest {
  string title = 1;
  repeated string user_ids = 2;
}

message CreateGroupResponse {
  enum Error {
    UNKNOWN_ERROR = 0;
    EMPTY_TITLE = 1;
    TITLE_TOO_LONG = 2;
    CREATION_NOT_ALLOWED = 3;
  }
  repeated Error errors = 1;
  Chat chat = 3;
}

message UpdateGroupSettingsRequest {
  string chat_id = 1;
  string title = 2;
}

message UpdateGroupSettingsResponse {
  enum Error {
    UNKNOWN_ERROR = 0;
    INVALID_CHAT_ERROR = 1;
    NOT_ALLOWED_ERROR = 2;
    EMPTY_TITLE_ERROR = 3;
    TITLE_TOO_LONG_ERROR = 4;
  }
  repeated Error errors = 1;
  Chat chat = 3;
}
