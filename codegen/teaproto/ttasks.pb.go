// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v4.25.2
// source: teatypes/ttasks.proto

package teaproto

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type TaskPositionUpdate_Type int32

const (
	// Add a task to the beginning (top) of the task list by status
	TaskPositionUpdate_BEGINNING TaskPositionUpdate_Type = 0
	// Add a task to the end (bottom) of the task list by status
	TaskPositionUpdate_END TaskPositionUpdate_Type = 1
	// Add a task after the specified task
	TaskPositionUpdate_AFTER_TARGET TaskPositionUpdate_Type = 2
	// Add a task before the specified task
	TaskPositionUpdate_BEFORE_TARGET TaskPositionUpdate_Type = 3
)

// Enum value maps for TaskPositionUpdate_Type.
var (
	TaskPositionUpdate_Type_name = map[int32]string{
		0: "BEGINNING",
		1: "END",
		2: "AFTER_TARGET",
		3: "BEFORE_TARGET",
	}
	TaskPositionUpdate_Type_value = map[string]int32{
		"BEGINNING":     0,
		"END":           1,
		"AFTER_TARGET":  2,
		"BEFORE_TARGET": 3,
	}
)

func (x TaskPositionUpdate_Type) Enum() *TaskPositionUpdate_Type {
	p := new(TaskPositionUpdate_Type)
	*p = x
	return p
}

func (x TaskPositionUpdate_Type) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TaskPositionUpdate_Type) Descriptor() protoreflect.EnumDescriptor {
	return file_teatypes_ttasks_proto_enumTypes[0].Descriptor()
}

func (TaskPositionUpdate_Type) Type() protoreflect.EnumType {
	return &file_teatypes_ttasks_proto_enumTypes[0]
}

func (x TaskPositionUpdate_Type) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TaskPositionUpdate_Type.Descriptor instead.
func (TaskPositionUpdate_Type) EnumDescriptor() ([]byte, []int) {
	return file_teatypes_ttasks_proto_rawDescGZIP(), []int{5, 0}
}

// Task is a task chat in the board.
type Task struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Task title. One of the title or description must be set.
	// For maximum length see StateResponse.max_task_title_length.
	Title string `protobuf:"bytes,6,opt,name=title,proto3" json:"title,omitempty"`
	// Task description. One of the title or description must be set.
	// For maximum length see StateResponse.max_task_description_length.
	Description string `protobuf:"bytes,7,opt,name=description,proto3" json:"description,omitempty"`
	// Task status id. If omitted, the task will be created in default status.
	TaskStatusId uint32 `protobuf:"varint,8,opt,name=task_status_id,json=taskStatusId,proto3" json:"task_status_id,omitempty"`
	// Task position in the task list by status. If 0, the task will be created at the end of the list.
	Position uint32 `protobuf:"varint,14,opt,name=position,proto3" json:"position,omitempty"`
	// Number of task members. Read only.
	NumMembers uint32 `protobuf:"varint,11,opt,name=num_members,json=numMembers,proto3" json:"num_members,omitempty"`
	// Can I delete this task? Read only/
	CanIDeleteThisTask bool `protobuf:"varint,12,opt,name=can_i_delete_this_task,json=canIDeleteThisTask,proto3" json:"can_i_delete_this_task,omitempty"`
	// Can I edit this task? Read only.
	CanIEditThisTask bool `protobuf:"varint,13,opt,name=can_i_edit_this_task,json=canIEditThisTask,proto3" json:"can_i_edit_this_task,omitempty"`
}

func (x *Task) Reset() {
	*x = Task{}
	if protoimpl.UnsafeEnabled {
		mi := &file_teatypes_ttasks_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Task) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Task) ProtoMessage() {}

func (x *Task) ProtoReflect() protoreflect.Message {
	mi := &file_teatypes_ttasks_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Task.ProtoReflect.Descriptor instead.
func (*Task) Descriptor() ([]byte, []int) {
	return file_teatypes_ttasks_proto_rawDescGZIP(), []int{0}
}

func (x *Task) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *Task) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *Task) GetTaskStatusId() uint32 {
	if x != nil {
		return x.TaskStatusId
	}
	return 0
}

func (x *Task) GetPosition() uint32 {
	if x != nil {
		return x.Position
	}
	return 0
}

func (x *Task) GetNumMembers() uint32 {
	if x != nil {
		return x.NumMembers
	}
	return 0
}

func (x *Task) GetCanIDeleteThisTask() bool {
	if x != nil {
		return x.CanIDeleteThisTask
	}
	return false
}

func (x *Task) GetCanIEditThisTask() bool {
	if x != nil {
		return x.CanIEditThisTask
	}
	return false
}

// Task status for the board.
type TaskStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Unique id of the status on the board
	Id uint32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	// Sort order of the status on the board
	SortOrder uint32 `protobuf:"varint,2,opt,name=sort_order,json=sortOrder,proto3" json:"sort_order,omitempty"`
	// Title of the status. For example: "To Do", "In Progress", "Done".
	Title string `protobuf:"bytes,3,opt,name=title,proto3" json:"title,omitempty"`
	// Color of the status. Empty string means default color.
	LabelTextColor string `protobuf:"bytes,4,opt,name=label_text_color,json=labelTextColor,proto3" json:"label_text_color,omitempty"`
	// Background color of the status. Empty string means default color.
	LabelBackgroundColor string `protobuf:"bytes,5,opt,name=label_background_color,json=labelBackgroundColor,proto3" json:"label_background_color,omitempty"`
}

func (x *TaskStatus) Reset() {
	*x = TaskStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_teatypes_ttasks_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TaskStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskStatus) ProtoMessage() {}

func (x *TaskStatus) ProtoReflect() protoreflect.Message {
	mi := &file_teatypes_ttasks_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskStatus.ProtoReflect.Descriptor instead.
func (*TaskStatus) Descriptor() ([]byte, []int) {
	return file_teatypes_ttasks_proto_rawDescGZIP(), []int{1}
}

func (x *TaskStatus) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *TaskStatus) GetSortOrder() uint32 {
	if x != nil {
		return x.SortOrder
	}
	return 0
}

func (x *TaskStatus) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *TaskStatus) GetLabelTextColor() string {
	if x != nil {
		return x.LabelTextColor
	}
	return ""
}

func (x *TaskStatus) GetLabelBackgroundColor() string {
	if x != nil {
		return x.LabelBackgroundColor
	}
	return ""
}

// Task role for the board.
type TaskRole struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Unique id inside board
	Id uint32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	// Human readable title
	Title string `protobuf:"bytes,2,opt,name=title,proto3" json:"title,omitempty"`
}

func (x *TaskRole) Reset() {
	*x = TaskRole{}
	if protoimpl.UnsafeEnabled {
		mi := &file_teatypes_ttasks_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TaskRole) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskRole) ProtoMessage() {}

func (x *TaskRole) ProtoReflect() protoreflect.Message {
	mi := &file_teatypes_ttasks_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskRole.ProtoReflect.Descriptor instead.
func (*TaskRole) Descriptor() ([]byte, []int) {
	return file_teatypes_ttasks_proto_rawDescGZIP(), []int{2}
}

func (x *TaskRole) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *TaskRole) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

// Task member information.
type TaskMember struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// User information.
	User *User `protobuf:"bytes,1,opt,name=user,proto3" json:"user,omitempty"`
	// Task role id. 0 means default role.
	TaskRoleId uint32 `protobuf:"varint,4,opt,name=task_role_id,json=taskRoleId,proto3" json:"task_role_id,omitempty"`
}

func (x *TaskMember) Reset() {
	*x = TaskMember{}
	if protoimpl.UnsafeEnabled {
		mi := &file_teatypes_ttasks_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TaskMember) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskMember) ProtoMessage() {}

func (x *TaskMember) ProtoReflect() protoreflect.Message {
	mi := &file_teatypes_ttasks_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskMember.ProtoReflect.Descriptor instead.
func (*TaskMember) Descriptor() ([]byte, []int) {
	return file_teatypes_ttasks_proto_rawDescGZIP(), []int{3}
}

func (x *TaskMember) GetUser() *User {
	if x != nil {
		return x.User
	}
	return nil
}

func (x *TaskMember) GetTaskRoleId() uint32 {
	if x != nil {
		return x.TaskRoleId
	}
	return 0
}

// Task member create/update request.
type TaskMemberUpdate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// User id. "me" means the current user.
	UserId string `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	// Task role id. 0 means default role.
	TaskRoleId *uint32 `protobuf:"varint,2,opt,name=task_role_id,json=taskRoleId,proto3,oneof" json:"task_role_id,omitempty"`
}

func (x *TaskMemberUpdate) Reset() {
	*x = TaskMemberUpdate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_teatypes_ttasks_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TaskMemberUpdate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskMemberUpdate) ProtoMessage() {}

func (x *TaskMemberUpdate) ProtoReflect() protoreflect.Message {
	mi := &file_teatypes_ttasks_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskMemberUpdate.ProtoReflect.Descriptor instead.
func (*TaskMemberUpdate) Descriptor() ([]byte, []int) {
	return file_teatypes_ttasks_proto_rawDescGZIP(), []int{4}
}

func (x *TaskMemberUpdate) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *TaskMemberUpdate) GetTaskRoleId() uint32 {
	if x != nil && x.TaskRoleId != nil {
		return *x.TaskRoleId
	}
	return 0
}

// Task position create/update request.
type TaskPositionUpdate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Type of the position update.
	Type TaskPositionUpdate_Type `protobuf:"varint,1,opt,name=type,proto3,enum=teatypes.TaskPositionUpdate_Type" json:"type,omitempty"`
	// Task id to add the new task after or before. Required if type is AFTER_TARGET or BEFORE_TARGET.
	TargetChatId string `protobuf:"bytes,2,opt,name=target_chat_id,json=targetChatId,proto3" json:"target_chat_id,omitempty"`
}

func (x *TaskPositionUpdate) Reset() {
	*x = TaskPositionUpdate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_teatypes_ttasks_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TaskPositionUpdate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskPositionUpdate) ProtoMessage() {}

func (x *TaskPositionUpdate) ProtoReflect() protoreflect.Message {
	mi := &file_teatypes_ttasks_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskPositionUpdate.ProtoReflect.Descriptor instead.
func (*TaskPositionUpdate) Descriptor() ([]byte, []int) {
	return file_teatypes_ttasks_proto_rawDescGZIP(), []int{5}
}

func (x *TaskPositionUpdate) GetType() TaskPositionUpdate_Type {
	if x != nil {
		return x.Type
	}
	return TaskPositionUpdate_BEGINNING
}

func (x *TaskPositionUpdate) GetTargetChatId() string {
	if x != nil {
		return x.TargetChatId
	}
	return ""
}

var File_teatypes_ttasks_proto protoreflect.FileDescriptor

var file_teatypes_ttasks_proto_rawDesc = []byte{
	0x0a, 0x15, 0x74, 0x65, 0x61, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2f, 0x74, 0x74, 0x61, 0x73, 0x6b,
	0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x08, 0x74, 0x65, 0x61, 0x74, 0x79, 0x70, 0x65,
	0x73, 0x1a, 0x15, 0x74, 0x65, 0x61, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2f, 0x74, 0x75, 0x73, 0x65,
	0x72, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x85, 0x02, 0x0a, 0x04, 0x54, 0x61, 0x73,
	0x6b, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x24, 0x0a, 0x0e, 0x74, 0x61, 0x73,
	0x6b, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x69, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0c, 0x74, 0x61, 0x73, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x49, 0x64, 0x12,
	0x1a, 0x0a, 0x08, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0e, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x08, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1f, 0x0a, 0x0b, 0x6e,
	0x75, 0x6d, 0x5f, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x0a, 0x6e, 0x75, 0x6d, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x12, 0x32, 0x0a, 0x16,
	0x63, 0x61, 0x6e, 0x5f, 0x69, 0x5f, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x5f, 0x74, 0x68, 0x69,
	0x73, 0x5f, 0x74, 0x61, 0x73, 0x6b, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x08, 0x52, 0x12, 0x63, 0x61,
	0x6e, 0x49, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x54, 0x68, 0x69, 0x73, 0x54, 0x61, 0x73, 0x6b,
	0x12, 0x2e, 0x0a, 0x14, 0x63, 0x61, 0x6e, 0x5f, 0x69, 0x5f, 0x65, 0x64, 0x69, 0x74, 0x5f, 0x74,
	0x68, 0x69, 0x73, 0x5f, 0x74, 0x61, 0x73, 0x6b, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10,
	0x63, 0x61, 0x6e, 0x49, 0x45, 0x64, 0x69, 0x74, 0x54, 0x68, 0x69, 0x73, 0x54, 0x61, 0x73, 0x6b,
	0x22, 0xb1, 0x01, 0x0a, 0x0a, 0x54, 0x61, 0x73, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x1d, 0x0a, 0x0a, 0x73, 0x6f, 0x72, 0x74, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x09, 0x73, 0x6f, 0x72, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x14,
	0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74,
	0x69, 0x74, 0x6c, 0x65, 0x12, 0x28, 0x0a, 0x10, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x5f, 0x74, 0x65,
	0x78, 0x74, 0x5f, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e,
	0x6c, 0x61, 0x62, 0x65, 0x6c, 0x54, 0x65, 0x78, 0x74, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x12, 0x34,
	0x0a, 0x16, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x5f, 0x62, 0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75,
	0x6e, 0x64, 0x5f, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14,
	0x6c, 0x61, 0x62, 0x65, 0x6c, 0x42, 0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x43,
	0x6f, 0x6c, 0x6f, 0x72, 0x22, 0x30, 0x0a, 0x08, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x6f, 0x6c, 0x65,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x22, 0x52, 0x0a, 0x0a, 0x54, 0x61, 0x73, 0x6b, 0x4d, 0x65,
	0x6d, 0x62, 0x65, 0x72, 0x12, 0x22, 0x0a, 0x04, 0x75, 0x73, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x74, 0x65, 0x61, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x55, 0x73,
	0x65, 0x72, 0x52, 0x04, 0x75, 0x73, 0x65, 0x72, 0x12, 0x20, 0x0a, 0x0c, 0x74, 0x61, 0x73, 0x6b,
	0x5f, 0x72, 0x6f, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a,
	0x74, 0x61, 0x73, 0x6b, 0x52, 0x6f, 0x6c, 0x65, 0x49, 0x64, 0x22, 0x63, 0x0a, 0x10, 0x54, 0x61,
	0x73, 0x6b, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x17,
	0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x25, 0x0a, 0x0c, 0x74, 0x61, 0x73, 0x6b, 0x5f,
	0x72, 0x6f, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x00, 0x52,
	0x0a, 0x74, 0x61, 0x73, 0x6b, 0x52, 0x6f, 0x6c, 0x65, 0x49, 0x64, 0x88, 0x01, 0x01, 0x42, 0x0f,
	0x0a, 0x0d, 0x5f, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x72, 0x6f, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x22,
	0xb6, 0x01, 0x0a, 0x12, 0x54, 0x61, 0x73, 0x6b, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x35, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x21, 0x2e, 0x74, 0x65, 0x61, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e,
	0x54, 0x61, 0x73, 0x6b, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x24, 0x0a,
	0x0e, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x63, 0x68, 0x61, 0x74, 0x5f, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x43, 0x68, 0x61,
	0x74, 0x49, 0x64, 0x22, 0x43, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0d, 0x0a, 0x09, 0x42,
	0x45, 0x47, 0x49, 0x4e, 0x4e, 0x49, 0x4e, 0x47, 0x10, 0x00, 0x12, 0x07, 0x0a, 0x03, 0x45, 0x4e,
	0x44, 0x10, 0x01, 0x12, 0x10, 0x0a, 0x0c, 0x41, 0x46, 0x54, 0x45, 0x52, 0x5f, 0x54, 0x41, 0x52,
	0x47, 0x45, 0x54, 0x10, 0x02, 0x12, 0x11, 0x0a, 0x0d, 0x42, 0x45, 0x46, 0x4f, 0x52, 0x45, 0x5f,
	0x54, 0x41, 0x52, 0x47, 0x45, 0x54, 0x10, 0x03, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_teatypes_ttasks_proto_rawDescOnce sync.Once
	file_teatypes_ttasks_proto_rawDescData = file_teatypes_ttasks_proto_rawDesc
)

func file_teatypes_ttasks_proto_rawDescGZIP() []byte {
	file_teatypes_ttasks_proto_rawDescOnce.Do(func() {
		file_teatypes_ttasks_proto_rawDescData = protoimpl.X.CompressGZIP(file_teatypes_ttasks_proto_rawDescData)
	})
	return file_teatypes_ttasks_proto_rawDescData
}

var file_teatypes_ttasks_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_teatypes_ttasks_proto_msgTypes = make([]protoimpl.MessageInfo, 6)
var file_teatypes_ttasks_proto_goTypes = []interface{}{
	(TaskPositionUpdate_Type)(0), // 0: teatypes.TaskPositionUpdate.Type
	(*Task)(nil),                 // 1: teatypes.Task
	(*TaskStatus)(nil),           // 2: teatypes.TaskStatus
	(*TaskRole)(nil),             // 3: teatypes.TaskRole
	(*TaskMember)(nil),           // 4: teatypes.TaskMember
	(*TaskMemberUpdate)(nil),     // 5: teatypes.TaskMemberUpdate
	(*TaskPositionUpdate)(nil),   // 6: teatypes.TaskPositionUpdate
	(*User)(nil),                 // 7: teatypes.User
}
var file_teatypes_ttasks_proto_depIdxs = []int32{
	7, // 0: teatypes.TaskMember.user:type_name -> teatypes.User
	0, // 1: teatypes.TaskPositionUpdate.type:type_name -> teatypes.TaskPositionUpdate.Type
	2, // [2:2] is the sub-list for method output_type
	2, // [2:2] is the sub-list for method input_type
	2, // [2:2] is the sub-list for extension type_name
	2, // [2:2] is the sub-list for extension extendee
	0, // [0:2] is the sub-list for field type_name
}

func init() { file_teatypes_ttasks_proto_init() }
func file_teatypes_ttasks_proto_init() {
	if File_teatypes_ttasks_proto != nil {
		return
	}
	file_teatypes_tusers_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_teatypes_ttasks_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Task); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_teatypes_ttasks_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TaskStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_teatypes_ttasks_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TaskRole); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_teatypes_ttasks_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TaskMember); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_teatypes_ttasks_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TaskMemberUpdate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_teatypes_ttasks_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TaskPositionUpdate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_teatypes_ttasks_proto_msgTypes[4].OneofWrappers = []interface{}{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_teatypes_ttasks_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   6,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_teatypes_ttasks_proto_goTypes,
		DependencyIndexes: file_teatypes_ttasks_proto_depIdxs,
		EnumInfos:         file_teatypes_ttasks_proto_enumTypes,
		MessageInfos:      file_teatypes_ttasks_proto_msgTypes,
	}.Build()
	File_teatypes_ttasks_proto = out.File
	file_teatypes_ttasks_proto_rawDesc = nil
	file_teatypes_ttasks_proto_goTypes = nil
	file_teatypes_ttasks_proto_depIdxs = nil
}
