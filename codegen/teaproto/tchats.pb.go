// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v4.25.2
// source: teatypes/tchats.proto

package teaproto

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ChatType int32

const (
	// Reserved
	ChatType_UNKNOWN_CHAT_TYPE ChatType = 0
	// Direct chat with another user
	ChatType_DIRECT ChatType = 1
	// Group chat
	ChatType_GROUP ChatType = 2
	// Task chat
	ChatType_TASK ChatType = 3
	// Board chat: contains task chats
	ChatType_BOARD ChatType = 4
)

// Enum value maps for ChatType.
var (
	ChatType_name = map[int32]string{
		0: "UNKNOWN_CHAT_TYPE",
		1: "DIRECT",
		2: "GROUP",
		3: "TASK",
		4: "BOARD",
	}
	ChatType_value = map[string]int32{
		"UNKNOWN_CHAT_TYPE": 0,
		"DIRECT":            1,
		"GROUP":             2,
		"TASK":              3,
		"BOARD":             4,
	}
)

func (x ChatType) Enum() *ChatType {
	p := new(ChatType)
	*p = x
	return p
}

func (x ChatType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ChatType) Descriptor() protoreflect.EnumDescriptor {
	return file_teatypes_tchats_proto_enumTypes[0].Descriptor()
}

func (ChatType) Type() protoreflect.EnumType {
	return &file_teatypes_tchats_proto_enumTypes[0]
}

func (x ChatType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ChatType.Descriptor instead.
func (ChatType) EnumDescriptor() ([]byte, []int) {
	return file_teatypes_tchats_proto_rawDescGZIP(), []int{0}
}

type Chat struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Chat id. UUID v4
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Chat type
	Type ChatType `protobuf:"varint,2,opt,name=type,proto3,enum=teatypes.ChatType" json:"type,omitempty"`
	// Parent chat id. Present only for task chats
	ParentId string `protobuf:"bytes,8,opt,name=parent_id,json=parentId,proto3" json:"parent_id,omitempty"`
	// Parent chat type. Present only for task chats and always is BOARD for now
	ParentType ChatType `protobuf:"varint,9,opt,name=parent_type,json=parentType,proto3,enum=teatypes.ChatType" json:"parent_type,omitempty"`
	// Creation time
	CreatedAt uint64 `protobuf:"varint,20,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	// Title of chat
	Title string `protobuf:"bytes,6,opt,name=title,proto3" json:"title,omitempty"`
	// Icon information
	Icon *Icon `protobuf:"bytes,7,opt,name=icon,proto3" json:"icon,omitempty"`
	// Types that are assignable to Topic:
	//
	//	*Chat_User
	//	*Chat_Group
	//	*Chat_Task
	//	*Chat_Board
	Topic isChat_Topic `protobuf_oneof:"topic"`
	// Chat state information. Present only for chats in chat list and for chat details
	State *ChatState `protobuf:"bytes,17,opt,name=state,proto3" json:"state,omitempty"`
}

func (x *Chat) Reset() {
	*x = Chat{}
	if protoimpl.UnsafeEnabled {
		mi := &file_teatypes_tchats_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Chat) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Chat) ProtoMessage() {}

func (x *Chat) ProtoReflect() protoreflect.Message {
	mi := &file_teatypes_tchats_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Chat.ProtoReflect.Descriptor instead.
func (*Chat) Descriptor() ([]byte, []int) {
	return file_teatypes_tchats_proto_rawDescGZIP(), []int{0}
}

func (x *Chat) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Chat) GetType() ChatType {
	if x != nil {
		return x.Type
	}
	return ChatType_UNKNOWN_CHAT_TYPE
}

func (x *Chat) GetParentId() string {
	if x != nil {
		return x.ParentId
	}
	return ""
}

func (x *Chat) GetParentType() ChatType {
	if x != nil {
		return x.ParentType
	}
	return ChatType_UNKNOWN_CHAT_TYPE
}

func (x *Chat) GetCreatedAt() uint64 {
	if x != nil {
		return x.CreatedAt
	}
	return 0
}

func (x *Chat) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *Chat) GetIcon() *Icon {
	if x != nil {
		return x.Icon
	}
	return nil
}

func (m *Chat) GetTopic() isChat_Topic {
	if m != nil {
		return m.Topic
	}
	return nil
}

func (x *Chat) GetUser() *User {
	if x, ok := x.GetTopic().(*Chat_User); ok {
		return x.User
	}
	return nil
}

func (x *Chat) GetGroup() *Group {
	if x, ok := x.GetTopic().(*Chat_Group); ok {
		return x.Group
	}
	return nil
}

func (x *Chat) GetTask() *Task {
	if x, ok := x.GetTopic().(*Chat_Task); ok {
		return x.Task
	}
	return nil
}

func (x *Chat) GetBoard() *Board {
	if x, ok := x.GetTopic().(*Chat_Board); ok {
		return x.Board
	}
	return nil
}

func (x *Chat) GetState() *ChatState {
	if x != nil {
		return x.State
	}
	return nil
}

type isChat_Topic interface {
	isChat_Topic()
}

type Chat_User struct {
	// User information with whom chat is. Present only for DIRECT chats
	User *User `protobuf:"bytes,15,opt,name=user,proto3,oneof"`
}

type Chat_Group struct {
	// Group information. Present only for GROUP chats
	Group *Group `protobuf:"bytes,16,opt,name=group,proto3,oneof"`
}

type Chat_Task struct {
	// Task information. Present only for TASK chats
	Task *Task `protobuf:"bytes,18,opt,name=task,proto3,oneof"`
}

type Chat_Board struct {
	// Board information. Present only for BOARD chats
	Board *Board `protobuf:"bytes,19,opt,name=board,proto3,oneof"`
}

func (*Chat_User) isChat_Topic() {}

func (*Chat_Group) isChat_Topic() {}

func (*Chat_Task) isChat_Topic() {}

func (*Chat_Board) isChat_Topic() {}

type ChatState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Last message information. Can be empty
	LastMessage *Message `protobuf:"bytes,8,opt,name=last_message,json=lastMessage,proto3" json:"last_message,omitempty"`
	// Last message reaction information. Can be empty. Present event message was deleted
	UpdatedAt uint64 `protobuf:"varint,9,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
	// Chat badge information.
	Badge *ChatBadge `protobuf:"bytes,14,opt,name=badge,proto3" json:"badge,omitempty"`
	// Chat pinned position, if any
	PinnedPosition uint32 `protobuf:"varint,12,opt,name=pinned_position,json=pinnedPosition,proto3" json:"pinned_position,omitempty"`
	// Bot commands. Still not implemented, reserved for future use
	BotCommands []*Command `protobuf:"bytes,15,rep,name=bot_commands,json=botCommands,proto3" json:"bot_commands,omitempty"`
}

func (x *ChatState) Reset() {
	*x = ChatState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_teatypes_tchats_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChatState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChatState) ProtoMessage() {}

func (x *ChatState) ProtoReflect() protoreflect.Message {
	mi := &file_teatypes_tchats_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChatState.ProtoReflect.Descriptor instead.
func (*ChatState) Descriptor() ([]byte, []int) {
	return file_teatypes_tchats_proto_rawDescGZIP(), []int{1}
}

func (x *ChatState) GetLastMessage() *Message {
	if x != nil {
		return x.LastMessage
	}
	return nil
}

func (x *ChatState) GetUpdatedAt() uint64 {
	if x != nil {
		return x.UpdatedAt
	}
	return 0
}

func (x *ChatState) GetBadge() *ChatBadge {
	if x != nil {
		return x.Badge
	}
	return nil
}

func (x *ChatState) GetPinnedPosition() uint32 {
	if x != nil {
		return x.PinnedPosition
	}
	return 0
}

func (x *ChatState) GetBotCommands() []*Command {
	if x != nil {
		return x.BotCommands
	}
	return nil
}

type MessageReaction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Unicode emoji
	Emoji string `protobuf:"bytes,1,opt,name=emoji,proto3" json:"emoji,omitempty"`
	// Count of reactions with this emoji
	Count uint32 `protobuf:"varint,2,opt,name=count,proto3" json:"count,omitempty"`
	// Is my reaction
	IsMy bool `protobuf:"varint,3,opt,name=is_my,json=isMy,proto3" json:"is_my,omitempty"`
	// Users who reacted with this emoji
	Users []*User `protobuf:"bytes,4,rep,name=users,proto3" json:"users,omitempty"`
}

func (x *MessageReaction) Reset() {
	*x = MessageReaction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_teatypes_tchats_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MessageReaction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MessageReaction) ProtoMessage() {}

func (x *MessageReaction) ProtoReflect() protoreflect.Message {
	mi := &file_teatypes_tchats_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MessageReaction.ProtoReflect.Descriptor instead.
func (*MessageReaction) Descriptor() ([]byte, []int) {
	return file_teatypes_tchats_proto_rawDescGZIP(), []int{2}
}

func (x *MessageReaction) GetEmoji() string {
	if x != nil {
		return x.Emoji
	}
	return ""
}

func (x *MessageReaction) GetCount() uint32 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *MessageReaction) GetIsMy() bool {
	if x != nil {
		return x.IsMy
	}
	return false
}

func (x *MessageReaction) GetUsers() []*User {
	if x != nil {
		return x.Users
	}
	return nil
}

type DeletedMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Time when message was deleted
	DeletedAt uint64 `protobuf:"varint,1,opt,name=deleted_at,json=deletedAt,proto3" json:"deleted_at,omitempty"`
}

func (x *DeletedMessage) Reset() {
	*x = DeletedMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_teatypes_tchats_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeletedMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeletedMessage) ProtoMessage() {}

func (x *DeletedMessage) ProtoReflect() protoreflect.Message {
	mi := &file_teatypes_tchats_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeletedMessage.ProtoReflect.Descriptor instead.
func (*DeletedMessage) Descriptor() ([]byte, []int) {
	return file_teatypes_tchats_proto_rawDescGZIP(), []int{3}
}

func (x *DeletedMessage) GetDeletedAt() uint64 {
	if x != nil {
		return x.DeletedAt
	}
	return 0
}

// Message in chat
type Message struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Message id. UUID v4
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Chat id. Actually need only for push notifications and websocket events but present in all messages for consistency
	ChatId string `protobuf:"bytes,16,opt,name=chat_id,json=chatId,proto3" json:"chat_id,omitempty"`
	// Message creation time
	CreatedAt uint64 `protobuf:"varint,3,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	// Time when message was edited by author. It happens only on text / uploads / reply / forwards change. When equal to
	// created_at, message was not edited.
	EditedAt uint64 `protobuf:"varint,9,opt,name=edited_at,json=editedAt,proto3" json:"edited_at,omitempty"`
	// Sender of message. If empty, message was sent by system
	Sender *User `protobuf:"bytes,5,opt,name=sender,proto3" json:"sender,omitempty"`
	// Types that are assignable to Content:
	//
	//	*Message_Text
	//	*Message_Forward
	//	*Message_SystemMessage
	//	*Message_AudioUpload
	//	*Message_Deleted
	Content isMessage_Content `protobuf_oneof:"content"`
	// Previous message id. If empty, message is first in chat
	PrevMessageId string `protobuf:"bytes,6,opt,name=prev_message_id,json=prevMessageId,proto3" json:"prev_message_id,omitempty"`
	// How many recipients received this message
	ViewedCounter uint32 `protobuf:"varint,7,opt,name=viewed_counter,json=viewedCounter,proto3" json:"viewed_counter,omitempty"`
	// Message to which this message is a reply
	Reply *Message `protobuf:"bytes,12,opt,name=reply,proto3,oneof" json:"reply,omitempty"`
	// Uploads in message
	Uploads []*Upload `protobuf:"bytes,11,rep,name=uploads,proto3" json:"uploads,omitempty"`
	// Reactions to this message
	Reactions []*MessageReaction `protobuf:"bytes,14,rep,name=reactions,proto3" json:"reactions,omitempty"`
	// Can I edit this message. Read only field. For now, message can be edited by author except for messages to bots.
	CanIEditThisMessage bool `protobuf:"varint,15,opt,name=can_i_edit_this_message,json=canIEditThisMessage,proto3" json:"can_i_edit_this_message,omitempty"`
	// Can I delete this message. Read only field.
	CanIDeleteThisMessage bool `protobuf:"varint,19,opt,name=can_i_delete_this_message,json=canIDeleteThisMessage,proto3" json:"can_i_delete_this_message,omitempty"`
}

func (x *Message) Reset() {
	*x = Message{}
	if protoimpl.UnsafeEnabled {
		mi := &file_teatypes_tchats_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Message) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Message) ProtoMessage() {}

func (x *Message) ProtoReflect() protoreflect.Message {
	mi := &file_teatypes_tchats_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Message.ProtoReflect.Descriptor instead.
func (*Message) Descriptor() ([]byte, []int) {
	return file_teatypes_tchats_proto_rawDescGZIP(), []int{4}
}

func (x *Message) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Message) GetChatId() string {
	if x != nil {
		return x.ChatId
	}
	return ""
}

func (x *Message) GetCreatedAt() uint64 {
	if x != nil {
		return x.CreatedAt
	}
	return 0
}

func (x *Message) GetEditedAt() uint64 {
	if x != nil {
		return x.EditedAt
	}
	return 0
}

func (x *Message) GetSender() *User {
	if x != nil {
		return x.Sender
	}
	return nil
}

func (m *Message) GetContent() isMessage_Content {
	if m != nil {
		return m.Content
	}
	return nil
}

func (x *Message) GetText() string {
	if x, ok := x.GetContent().(*Message_Text); ok {
		return x.Text
	}
	return ""
}

func (x *Message) GetForward() *ChatMessage {
	if x, ok := x.GetContent().(*Message_Forward); ok {
		return x.Forward
	}
	return nil
}

func (x *Message) GetSystemMessage() *SystemMessage {
	if x, ok := x.GetContent().(*Message_SystemMessage); ok {
		return x.SystemMessage
	}
	return nil
}

func (x *Message) GetAudioUpload() *Upload {
	if x, ok := x.GetContent().(*Message_AudioUpload); ok {
		return x.AudioUpload
	}
	return nil
}

func (x *Message) GetDeleted() *DeletedMessage {
	if x, ok := x.GetContent().(*Message_Deleted); ok {
		return x.Deleted
	}
	return nil
}

func (x *Message) GetPrevMessageId() string {
	if x != nil {
		return x.PrevMessageId
	}
	return ""
}

func (x *Message) GetViewedCounter() uint32 {
	if x != nil {
		return x.ViewedCounter
	}
	return 0
}

func (x *Message) GetReply() *Message {
	if x != nil {
		return x.Reply
	}
	return nil
}

func (x *Message) GetUploads() []*Upload {
	if x != nil {
		return x.Uploads
	}
	return nil
}

func (x *Message) GetReactions() []*MessageReaction {
	if x != nil {
		return x.Reactions
	}
	return nil
}

func (x *Message) GetCanIEditThisMessage() bool {
	if x != nil {
		return x.CanIEditThisMessage
	}
	return false
}

func (x *Message) GetCanIDeleteThisMessage() bool {
	if x != nil {
		return x.CanIDeleteThisMessage
	}
	return false
}

type isMessage_Content interface {
	isMessage_Content()
}

type Message_Text struct {
	// Message text if message is text message
	Text string `protobuf:"bytes,4,opt,name=text,proto3,oneof"`
}

type Message_Forward struct {
	// Forwarded message information for forwarded messages
	Forward *ChatMessage `protobuf:"bytes,13,opt,name=forward,proto3,oneof"`
}

type Message_SystemMessage struct {
	// System message information for system messages
	SystemMessage *SystemMessage `protobuf:"bytes,17,opt,name=system_message,json=systemMessage,proto3,oneof"`
}

type Message_AudioUpload struct {
	// Upload information for audio messages
	AudioUpload *Upload `protobuf:"bytes,18,opt,name=audio_upload,json=audioUpload,proto3,oneof"`
}

type Message_Deleted struct {
	// Deleted message information for deleted messages
	Deleted *DeletedMessage `protobuf:"bytes,20,opt,name=deleted,proto3,oneof"`
}

func (*Message_Text) isMessage_Content() {}

func (*Message_Forward) isMessage_Content() {}

func (*Message_SystemMessage) isMessage_Content() {}

func (*Message_AudioUpload) isMessage_Content() {}

func (*Message_Deleted) isMessage_Content() {}

// Message with full chat info. For forwarded, search results etc.
type ChatMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Chat information
	Chat *Chat `protobuf:"bytes,1,opt,name=chat,proto3" json:"chat,omitempty"`
	// Message information
	Message *Message `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *ChatMessage) Reset() {
	*x = ChatMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_teatypes_tchats_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChatMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChatMessage) ProtoMessage() {}

func (x *ChatMessage) ProtoReflect() protoreflect.Message {
	mi := &file_teatypes_tchats_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChatMessage.ProtoReflect.Descriptor instead.
func (*ChatMessage) Descriptor() ([]byte, []int) {
	return file_teatypes_tchats_proto_rawDescGZIP(), []int{5}
}

func (x *ChatMessage) GetChat() *Chat {
	if x != nil {
		return x.Chat
	}
	return nil
}

func (x *ChatMessage) GetMessage() *Message {
	if x != nil {
		return x.Message
	}
	return nil
}

type ChatBadge struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Chat id. Present only for ChatBadge in Chat
	ChatId string `protobuf:"bytes,1,opt,name=chat_id,json=chatId,proto3" json:"chat_id,omitempty"`
	// Counter for chat
	Counter uint32 `protobuf:"varint,2,opt,name=counter,proto3" json:"counter,omitempty"`
	// Updated at time. In conflicting cases, the badge with the latest updated_at should be used
	UpdatedAt uint64 `protobuf:"varint,3,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
	// Last viewed message id
	LastViewedMessageId string `protobuf:"bytes,4,opt,name=last_viewed_message_id,json=lastViewedMessageId,proto3" json:"last_viewed_message_id,omitempty"`
	// Last viewed message creation time
	LastViewedMessageCreatedAt uint64 `protobuf:"varint,5,opt,name=last_viewed_message_created_at,json=lastViewedMessageCreatedAt,proto3" json:"last_viewed_message_created_at,omitempty"`
}

func (x *ChatBadge) Reset() {
	*x = ChatBadge{}
	if protoimpl.UnsafeEnabled {
		mi := &file_teatypes_tchats_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChatBadge) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChatBadge) ProtoMessage() {}

func (x *ChatBadge) ProtoReflect() protoreflect.Message {
	mi := &file_teatypes_tchats_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChatBadge.ProtoReflect.Descriptor instead.
func (*ChatBadge) Descriptor() ([]byte, []int) {
	return file_teatypes_tchats_proto_rawDescGZIP(), []int{6}
}

func (x *ChatBadge) GetChatId() string {
	if x != nil {
		return x.ChatId
	}
	return ""
}

func (x *ChatBadge) GetCounter() uint32 {
	if x != nil {
		return x.Counter
	}
	return 0
}

func (x *ChatBadge) GetUpdatedAt() uint64 {
	if x != nil {
		return x.UpdatedAt
	}
	return 0
}

func (x *ChatBadge) GetLastViewedMessageId() string {
	if x != nil {
		return x.LastViewedMessageId
	}
	return ""
}

func (x *ChatBadge) GetLastViewedMessageCreatedAt() uint64 {
	if x != nil {
		return x.LastViewedMessageCreatedAt
	}
	return 0
}

var File_teatypes_tchats_proto protoreflect.FileDescriptor

var file_teatypes_tchats_proto_rawDesc = []byte{
	0x0a, 0x15, 0x74, 0x65, 0x61, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2f, 0x74, 0x63, 0x68, 0x61, 0x74,
	0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x08, 0x74, 0x65, 0x61, 0x74, 0x79, 0x70, 0x65,
	0x73, 0x1a, 0x18, 0x74, 0x65, 0x61, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2f, 0x74, 0x63, 0x6f, 0x6d,
	0x6d, 0x61, 0x6e, 0x64, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x16, 0x74, 0x65, 0x61,
	0x74, 0x79, 0x70, 0x65, 0x73, 0x2f, 0x74, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x16, 0x74, 0x65, 0x61, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2f, 0x74, 0x67,
	0x72, 0x6f, 0x75, 0x70, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x16, 0x74, 0x65, 0x61,
	0x74, 0x79, 0x70, 0x65, 0x73, 0x2f, 0x74, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x15, 0x74, 0x65, 0x61, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2f, 0x74, 0x74,
	0x61, 0x73, 0x6b, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x15, 0x74, 0x65, 0x61, 0x74,
	0x79, 0x70, 0x65, 0x73, 0x2f, 0x74, 0x75, 0x73, 0x65, 0x72, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x1f, 0x74, 0x65, 0x61, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2f, 0x74, 0x73, 0x79, 0x73,
	0x74, 0x65, 0x6d, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x17, 0x74, 0x65, 0x61, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2f, 0x74, 0x75, 0x70,
	0x6c, 0x6f, 0x61, 0x64, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xbb, 0x03, 0x0a, 0x04,
	0x43, 0x68, 0x61, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x26, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x12, 0x2e, 0x74, 0x65, 0x61, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x43, 0x68,
	0x61, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x1b, 0x0a, 0x09,
	0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x33, 0x0a, 0x0b, 0x70, 0x61, 0x72,
	0x65, 0x6e, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x12,
	0x2e, 0x74, 0x65, 0x61, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x43, 0x68, 0x61, 0x74, 0x54, 0x79,
	0x70, 0x65, 0x52, 0x0a, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1d,
	0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x14, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x14, 0x0a,
	0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69,
	0x74, 0x6c, 0x65, 0x12, 0x22, 0x0a, 0x04, 0x69, 0x63, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0e, 0x2e, 0x74, 0x65, 0x61, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x49, 0x63, 0x6f,
	0x6e, 0x52, 0x04, 0x69, 0x63, 0x6f, 0x6e, 0x12, 0x24, 0x0a, 0x04, 0x75, 0x73, 0x65, 0x72, 0x18,
	0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x74, 0x65, 0x61, 0x74, 0x79, 0x70, 0x65, 0x73,
	0x2e, 0x55, 0x73, 0x65, 0x72, 0x48, 0x00, 0x52, 0x04, 0x75, 0x73, 0x65, 0x72, 0x12, 0x27, 0x0a,
	0x05, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x74,
	0x65, 0x61, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x48, 0x00, 0x52,
	0x05, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x24, 0x0a, 0x04, 0x74, 0x61, 0x73, 0x6b, 0x18, 0x12,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x74, 0x65, 0x61, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e,
	0x54, 0x61, 0x73, 0x6b, 0x48, 0x00, 0x52, 0x04, 0x74, 0x61, 0x73, 0x6b, 0x12, 0x27, 0x0a, 0x05,
	0x62, 0x6f, 0x61, 0x72, 0x64, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x74, 0x65,
	0x61, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x48, 0x00, 0x52, 0x05,
	0x62, 0x6f, 0x61, 0x72, 0x64, 0x12, 0x29, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x11,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x74, 0x65, 0x61, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e,
	0x43, 0x68, 0x61, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x42, 0x07, 0x0a, 0x05, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x22, 0x82, 0x02, 0x0a, 0x09, 0x43, 0x68,
	0x61, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x34, 0x0a, 0x0c, 0x6c, 0x61, 0x73, 0x74, 0x5f,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e,
	0x74, 0x65, 0x61, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x52, 0x0b, 0x6c, 0x61, 0x73, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x1d, 0x0a,
	0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x29, 0x0a, 0x05,
	0x62, 0x61, 0x64, 0x67, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x74, 0x65,
	0x61, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x43, 0x68, 0x61, 0x74, 0x42, 0x61, 0x64, 0x67, 0x65,
	0x52, 0x05, 0x62, 0x61, 0x64, 0x67, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x70, 0x69, 0x6e, 0x6e, 0x65,
	0x64, 0x5f, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x0e, 0x70, 0x69, 0x6e, 0x6e, 0x65, 0x64, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x34, 0x0a, 0x0c, 0x62, 0x6f, 0x74, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x73,
	0x18, 0x0f, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x74, 0x65, 0x61, 0x74, 0x79, 0x70, 0x65,
	0x73, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x52, 0x0b, 0x62, 0x6f, 0x74, 0x43, 0x6f,
	0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x73, 0x4a, 0x04, 0x08, 0x01, 0x10, 0x08, 0x4a, 0x04, 0x08, 0x0a,
	0x10, 0x0b, 0x4a, 0x04, 0x08, 0x0b, 0x10, 0x0c, 0x4a, 0x04, 0x08, 0x0d, 0x10, 0x0e, 0x22, 0x78,
	0x0a, 0x0f, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x65, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x6d, 0x6f, 0x6a, 0x69, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x65, 0x6d, 0x6f, 0x6a, 0x69, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x13, 0x0a,
	0x05, 0x69, 0x73, 0x5f, 0x6d, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x04, 0x69, 0x73,
	0x4d, 0x79, 0x12, 0x24, 0x0a, 0x05, 0x75, 0x73, 0x65, 0x72, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x0e, 0x2e, 0x74, 0x65, 0x61, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x55, 0x73, 0x65,
	0x72, 0x52, 0x05, 0x75, 0x73, 0x65, 0x72, 0x73, 0x22, 0x2f, 0x0a, 0x0e, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x64, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09,
	0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x41, 0x74, 0x22, 0x87, 0x06, 0x0a, 0x07, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x63, 0x68, 0x61, 0x74, 0x5f, 0x69, 0x64,
	0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x63, 0x68, 0x61, 0x74, 0x49, 0x64, 0x12, 0x1d,
	0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1b, 0x0a,
	0x09, 0x65, 0x64, 0x69, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x08, 0x65, 0x64, 0x69, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x26, 0x0a, 0x06, 0x73, 0x65,
	0x6e, 0x64, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x74, 0x65, 0x61,
	0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x52, 0x06, 0x73, 0x65, 0x6e, 0x64,
	0x65, 0x72, 0x12, 0x14, 0x0a, 0x04, 0x74, 0x65, 0x78, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x00, 0x52, 0x04, 0x74, 0x65, 0x78, 0x74, 0x12, 0x31, 0x0a, 0x07, 0x66, 0x6f, 0x72, 0x77,
	0x61, 0x72, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x74, 0x65, 0x61, 0x74,
	0x79, 0x70, 0x65, 0x73, 0x2e, 0x43, 0x68, 0x61, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x48, 0x00, 0x52, 0x07, 0x66, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x12, 0x40, 0x0a, 0x0e, 0x73,
	0x79, 0x73, 0x74, 0x65, 0x6d, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x11, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x74, 0x65, 0x61, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x53,
	0x79, 0x73, 0x74, 0x65, 0x6d, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x48, 0x00, 0x52, 0x0d,
	0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x35, 0x0a,
	0x0c, 0x61, 0x75, 0x64, 0x69, 0x6f, 0x5f, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x18, 0x12, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x74, 0x65, 0x61, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x55,
	0x70, 0x6c, 0x6f, 0x61, 0x64, 0x48, 0x00, 0x52, 0x0b, 0x61, 0x75, 0x64, 0x69, 0x6f, 0x55, 0x70,
	0x6c, 0x6f, 0x61, 0x64, 0x12, 0x34, 0x0a, 0x07, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x18,
	0x14, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x74, 0x65, 0x61, 0x74, 0x79, 0x70, 0x65, 0x73,
	0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x48,
	0x00, 0x52, 0x07, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x12, 0x26, 0x0a, 0x0f, 0x70, 0x72,
	0x65, 0x76, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0d, 0x70, 0x72, 0x65, 0x76, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x49, 0x64, 0x12, 0x25, 0x0a, 0x0e, 0x76, 0x69, 0x65, 0x77, 0x65, 0x64, 0x5f, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x65, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x76, 0x69, 0x65, 0x77,
	0x65, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x12, 0x2c, 0x0a, 0x05, 0x72, 0x65, 0x70,
	0x6c, 0x79, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x74, 0x65, 0x61, 0x74, 0x79,
	0x70, 0x65, 0x73, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x48, 0x01, 0x52, 0x05, 0x72,
	0x65, 0x70, 0x6c, 0x79, 0x88, 0x01, 0x01, 0x12, 0x2a, 0x0a, 0x07, 0x75, 0x70, 0x6c, 0x6f, 0x61,
	0x64, 0x73, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x74, 0x65, 0x61, 0x74, 0x79,
	0x70, 0x65, 0x73, 0x2e, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x52, 0x07, 0x75, 0x70, 0x6c, 0x6f,
	0x61, 0x64, 0x73, 0x12, 0x37, 0x0a, 0x09, 0x72, 0x65, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x18, 0x0e, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x74, 0x65, 0x61, 0x74, 0x79, 0x70, 0x65,
	0x73, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x65, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x09, 0x72, 0x65, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x34, 0x0a, 0x17,
	0x63, 0x61, 0x6e, 0x5f, 0x69, 0x5f, 0x65, 0x64, 0x69, 0x74, 0x5f, 0x74, 0x68, 0x69, 0x73, 0x5f,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x08, 0x52, 0x13, 0x63,
	0x61, 0x6e, 0x49, 0x45, 0x64, 0x69, 0x74, 0x54, 0x68, 0x69, 0x73, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x12, 0x38, 0x0a, 0x19, 0x63, 0x61, 0x6e, 0x5f, 0x69, 0x5f, 0x64, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x5f, 0x74, 0x68, 0x69, 0x73, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18,
	0x13, 0x20, 0x01, 0x28, 0x08, 0x52, 0x15, 0x63, 0x61, 0x6e, 0x49, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x54, 0x68, 0x69, 0x73, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x42, 0x09, 0x0a, 0x07,
	0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x72, 0x65, 0x70, 0x6c,
	0x79, 0x4a, 0x04, 0x08, 0x02, 0x10, 0x03, 0x4a, 0x04, 0x08, 0x08, 0x10, 0x09, 0x4a, 0x04, 0x08,
	0x0a, 0x10, 0x0b, 0x22, 0x5e, 0x0a, 0x0b, 0x43, 0x68, 0x61, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x12, 0x22, 0x0a, 0x04, 0x63, 0x68, 0x61, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0e, 0x2e, 0x74, 0x65, 0x61, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x43, 0x68, 0x61, 0x74,
	0x52, 0x04, 0x63, 0x68, 0x61, 0x74, 0x12, 0x2b, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x74, 0x65, 0x61, 0x74, 0x79, 0x70,
	0x65, 0x73, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x22, 0xd6, 0x01, 0x0a, 0x09, 0x43, 0x68, 0x61, 0x74, 0x42, 0x61, 0x64, 0x67,
	0x65, 0x12, 0x17, 0x0a, 0x07, 0x63, 0x68, 0x61, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x63, 0x68, 0x61, 0x74, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x65, 0x72, 0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f,
	0x61, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x64, 0x41, 0x74, 0x12, 0x33, 0x0a, 0x16, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x76, 0x69, 0x65, 0x77,
	0x65, 0x64, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x13, 0x6c, 0x61, 0x73, 0x74, 0x56, 0x69, 0x65, 0x77, 0x65, 0x64, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x49, 0x64, 0x12, 0x42, 0x0a, 0x1e, 0x6c, 0x61, 0x73, 0x74,
	0x5f, 0x76, 0x69, 0x65, 0x77, 0x65, 0x64, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x1a, 0x6c, 0x61, 0x73, 0x74, 0x56, 0x69, 0x65, 0x77, 0x65, 0x64, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x2a, 0x4d, 0x0a, 0x08,
	0x43, 0x68, 0x61, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x15, 0x0a, 0x11, 0x55, 0x4e, 0x4b, 0x4e,
	0x4f, 0x57, 0x4e, 0x5f, 0x43, 0x48, 0x41, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x10, 0x00, 0x12,
	0x0a, 0x0a, 0x06, 0x44, 0x49, 0x52, 0x45, 0x43, 0x54, 0x10, 0x01, 0x12, 0x09, 0x0a, 0x05, 0x47,
	0x52, 0x4f, 0x55, 0x50, 0x10, 0x02, 0x12, 0x08, 0x0a, 0x04, 0x54, 0x41, 0x53, 0x4b, 0x10, 0x03,
	0x12, 0x09, 0x0a, 0x05, 0x42, 0x4f, 0x41, 0x52, 0x44, 0x10, 0x04, 0x62, 0x06, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x33,
}

var (
	file_teatypes_tchats_proto_rawDescOnce sync.Once
	file_teatypes_tchats_proto_rawDescData = file_teatypes_tchats_proto_rawDesc
)

func file_teatypes_tchats_proto_rawDescGZIP() []byte {
	file_teatypes_tchats_proto_rawDescOnce.Do(func() {
		file_teatypes_tchats_proto_rawDescData = protoimpl.X.CompressGZIP(file_teatypes_tchats_proto_rawDescData)
	})
	return file_teatypes_tchats_proto_rawDescData
}

var file_teatypes_tchats_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_teatypes_tchats_proto_msgTypes = make([]protoimpl.MessageInfo, 7)
var file_teatypes_tchats_proto_goTypes = []interface{}{
	(ChatType)(0),           // 0: teatypes.ChatType
	(*Chat)(nil),            // 1: teatypes.Chat
	(*ChatState)(nil),       // 2: teatypes.ChatState
	(*MessageReaction)(nil), // 3: teatypes.MessageReaction
	(*DeletedMessage)(nil),  // 4: teatypes.DeletedMessage
	(*Message)(nil),         // 5: teatypes.Message
	(*ChatMessage)(nil),     // 6: teatypes.ChatMessage
	(*ChatBadge)(nil),       // 7: teatypes.ChatBadge
	(*Icon)(nil),            // 8: teatypes.Icon
	(*User)(nil),            // 9: teatypes.User
	(*Group)(nil),           // 10: teatypes.Group
	(*Task)(nil),            // 11: teatypes.Task
	(*Board)(nil),           // 12: teatypes.Board
	(*Command)(nil),         // 13: teatypes.Command
	(*SystemMessage)(nil),   // 14: teatypes.SystemMessage
	(*Upload)(nil),          // 15: teatypes.Upload
}
var file_teatypes_tchats_proto_depIdxs = []int32{
	0,  // 0: teatypes.Chat.type:type_name -> teatypes.ChatType
	0,  // 1: teatypes.Chat.parent_type:type_name -> teatypes.ChatType
	8,  // 2: teatypes.Chat.icon:type_name -> teatypes.Icon
	9,  // 3: teatypes.Chat.user:type_name -> teatypes.User
	10, // 4: teatypes.Chat.group:type_name -> teatypes.Group
	11, // 5: teatypes.Chat.task:type_name -> teatypes.Task
	12, // 6: teatypes.Chat.board:type_name -> teatypes.Board
	2,  // 7: teatypes.Chat.state:type_name -> teatypes.ChatState
	5,  // 8: teatypes.ChatState.last_message:type_name -> teatypes.Message
	7,  // 9: teatypes.ChatState.badge:type_name -> teatypes.ChatBadge
	13, // 10: teatypes.ChatState.bot_commands:type_name -> teatypes.Command
	9,  // 11: teatypes.MessageReaction.users:type_name -> teatypes.User
	9,  // 12: teatypes.Message.sender:type_name -> teatypes.User
	6,  // 13: teatypes.Message.forward:type_name -> teatypes.ChatMessage
	14, // 14: teatypes.Message.system_message:type_name -> teatypes.SystemMessage
	15, // 15: teatypes.Message.audio_upload:type_name -> teatypes.Upload
	4,  // 16: teatypes.Message.deleted:type_name -> teatypes.DeletedMessage
	5,  // 17: teatypes.Message.reply:type_name -> teatypes.Message
	15, // 18: teatypes.Message.uploads:type_name -> teatypes.Upload
	3,  // 19: teatypes.Message.reactions:type_name -> teatypes.MessageReaction
	1,  // 20: teatypes.ChatMessage.chat:type_name -> teatypes.Chat
	5,  // 21: teatypes.ChatMessage.message:type_name -> teatypes.Message
	22, // [22:22] is the sub-list for method output_type
	22, // [22:22] is the sub-list for method input_type
	22, // [22:22] is the sub-list for extension type_name
	22, // [22:22] is the sub-list for extension extendee
	0,  // [0:22] is the sub-list for field type_name
}

func init() { file_teatypes_tchats_proto_init() }
func file_teatypes_tchats_proto_init() {
	if File_teatypes_tchats_proto != nil {
		return
	}
	file_teatypes_tcommands_proto_init()
	file_teatypes_tboards_proto_init()
	file_teatypes_tgroups_proto_init()
	file_teatypes_timages_proto_init()
	file_teatypes_ttasks_proto_init()
	file_teatypes_tusers_proto_init()
	file_teatypes_tsystem_messages_proto_init()
	file_teatypes_tuploads_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_teatypes_tchats_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Chat); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_teatypes_tchats_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChatState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_teatypes_tchats_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MessageReaction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_teatypes_tchats_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeletedMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_teatypes_tchats_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Message); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_teatypes_tchats_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChatMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_teatypes_tchats_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChatBadge); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_teatypes_tchats_proto_msgTypes[0].OneofWrappers = []interface{}{
		(*Chat_User)(nil),
		(*Chat_Group)(nil),
		(*Chat_Task)(nil),
		(*Chat_Board)(nil),
	}
	file_teatypes_tchats_proto_msgTypes[4].OneofWrappers = []interface{}{
		(*Message_Text)(nil),
		(*Message_Forward)(nil),
		(*Message_SystemMessage)(nil),
		(*Message_AudioUpload)(nil),
		(*Message_Deleted)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_teatypes_tchats_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   7,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_teatypes_tchats_proto_goTypes,
		DependencyIndexes: file_teatypes_tchats_proto_depIdxs,
		EnumInfos:         file_teatypes_tchats_proto_enumTypes,
		MessageInfos:      file_teatypes_tchats_proto_msgTypes,
	}.Build()
	File_teatypes_tchats_proto = out.File
	file_teatypes_tchats_proto_rawDesc = nil
	file_teatypes_tchats_proto_goTypes = nil
	file_teatypes_tchats_proto_depIdxs = nil
}
