syntax = "proto3";

package gtproto;

import "badges.proto";
import "commons.proto";
import "uploads.proto";
import "users.proto";

enum ChatType {
  UNKNOWN_CHAT_TYPE = 0;
  DIRECT = 1;
  GROUP = 2;
  TASK = 3;
}

enum ChatEventType {
  TYPING = 0;
  RECORDING_AUDIO = 1;
  CHOOSING_STICKER = 2;
}

message Group {
  string title = 2;
  Icon icon = 3;
  uint32 num_members = 4;
}

message Command {
  string command = 1; // string always starts with '/' symbol. Example: "/help"
  string description = 2;
  CommandArgument arguments = 3; // optional command arguments. Example: "/help [command]"
}

message CommandArgument {
  string name = 1;
  string description = 2;
  bool required = 3;
}

message Chat {
  string id = 1;
  string title = 6;
  Icon icon = 7;
  ChatType type = 2;
  oneof topic {
    User user = 15; // for type = DIRECT
    Group group = 16; // for type = GROUP
  }
  ChatState state = 17;  // present only for chats in chat list and for chat details
}

// Chat details related to current member
message ChatState {
  Message last_message = 8; // can be empty
  uint64 updated_at = 9; // last message creation time even message was deleted
  string last_viewed_message_id = 10; // optional
  uint64 last_viewed_message_created_at = 13; // optional
  ChatBadge badge = 14;
  uint32 pinned_position = 12; // pinned position at chat list, if any
  repeated Command bot_commands = 15;
}

message ChatEvent {
  ChatEventType type = 1;
  string chat_id = 2;
  User user = 6;
  uint64 stop_after = 4; // stop showing event after this time
  bool stop_now = 5; // stop showing event right now
}

message Message {
  string chat_id = 16; // actually need only for push notifications and websocket events but present in all messages for consistency
  string id = 1;
  uint64 created_at = 3;
  uint64 edited_at = 9; // Time when message was edited by author. It happens only on text / uploads / reply / forwards change. When equal to created_at, message was not edited.
  string text = 4;
  User sender = 5; // Sender of message. If empty, message was sent by system
  string prev_message_id = 6; // If empty, message is first in chat
  uint32 viewed_counter = 7; // How many recipients viewed this message

  // attachments
  Message reply = 12;
  ChatMessage forward = 13;
  repeated Upload uploads = 11;
  repeated MessageReaction reactions = 14;

  // rights
  bool can_i_edit_this_message = 15; // message can be edited by author except for messages to bots
}

// Message with full chat info. For forwarded, search results etc
message ChatMessage {
  Chat chat = 1;
  Message message = 2;
}

message MessageReaction {
  string emoji = 1;
  uint32 count = 2; // total count of reactions
  bool is_my = 3; // is my reaction
  repeated User users = 4; // users who reacted with this emoji
}

message ViewedMessage {
  string message_id = 1;
  string chat_id = 2;
  uint32 viewed_counter = 3; // how many recipients viewed this message
}

message SendMessageRequest {
  string id = 4; // optional: when present used as id for new message or for editing existing message
  oneof recipient {
    string chat_id = 2;
    string user_id = 1;
  }

  oneof content {
    string text = 3;
    string forward_id = 7;
  }

  // attachments
  string reply_id = 6; // optional
  repeated string upload_ids = 5;
}

message SendMessageResponse {
  enum Error {
    UNKNOWN_ERROR = 0;
    INVALID_MESSAGE_ID_ERROR = 1;
    INVALID_RECIPIENT_ERROR = 2;
    MESSAGE_TEXT_TOO_LONG_ERROR = 3; // see StateResponse.max_message_length
    MESSAGE_IS_EMPTY_ERROR = 4; // message must have text, uploads or forward_id
    TOO_MANY_UPLOADS_ERROR = 5; // see StateResponse.max_uploads_for_message
    INVALID_FORWARDED_MESSAGE_ERROR = 7;
    INVALID_REPLIED_MESSAGE_ERROR = 8; // message must be from the same chat
  }
  repeated Error errors = 1;

  Message message = 2;
}

message MessagesListRequest {
  message LatestFilter {
    oneof recipient {
      string chat_id = 1;
      string user_id = 2;
    }
    uint32 limit = 3; // default: StateResponse.max_results_on_page
  }

  message ScrollFilter {
    oneof recipient {
      string chat_id = 1;
      string user_id = 2;
    }
    string message_id = 6;
    uint32 new_messages_limit = 4;
    uint32 old_messages_limit = 5;
  }

  oneof filter {
    LatestFilter latest = 3;
    ScrollFilter scroll = 4;
  }

  // filters
  bool only_with_uploads = 6;
}

message MessagesListResponse {
  enum Error {
    UNKNOWN_ERROR = 0;
    INVALID_RECIPIENT_ERROR = 1;
    INVALID_MESSAGE_ID_ERROR = 2;
    INVALID_LIMIT_ERROR = 3;
  }
  repeated Error errors = 1;

  repeated Message messages = 2;
}

message MessageDetailsRequest {
  string id = 1;
}

message MessageDetailsResponse {
  enum Error {
    UNKNOWN_ERROR = 0;
    INVALID_MESSAGE_ID_ERROR = 1;
  }
  repeated Error errors = 1;
  Message message = 2;
}

message ViewMessageRequest {
  string id = 1;
}

message ViewMessageResponse {
  enum Error {
    UNKNOWN_ERROR = 0;
    INVALID_MESSAGE_ID_ERROR = 1;
  }
  repeated Error errors = 1;
  repeated ViewedMessage viewed_messages = 3; // viewed messages list
  ChatBadge badge = 4;  // number of unseen messages
}

message MessageViewersRequest {
  string id = 1;
}

message MessageViewersResponse {
  enum Error {
    UNKNOWN_ERROR = 0;
    INVALID_MESSAGE_ID_ERROR = 1;
  }
  repeated Error errors = 1;
  repeated User users = 3;
}

message ChatDetailsRequest {
  oneof recipient {
    string chat_id = 2;
    string user_id = 1;
  }
}

message ChatDetailsResponse {
  enum Error {
    UNKNOWN_ERROR = 0;
    INVALID_RECIPIENT_ERROR = 1;
  }
  repeated Error errors = 1;
  Chat chat = 2;
}

message PinChatRequest {
  oneof recipient {
    string chat_id = 2;
    string user_id = 1;
  }
  uint32 pinned_position = 3; // 0 = unpin
}

message PinChatResponse {
  enum Error {
    UNKNOWN_ERROR = 0;
    INVALID_RECIPIENT_ERROR = 1;
  }
  repeated Error errors = 1;
  Chat chat = 2;
}

message ChatListRequest {
  repeated ChatType chat_types = 1; // if empty, all chats are returned
  uint32 limit = 2; // default: StateResponse.max_results_on_page
  uint32 offset = 3;
  uint64 min_updated_at = 4; // optional
}

message ChatListResponse {
  enum Error {
    UNKNOWN_ERROR = 0;
    INVALID_LIMIT_ERROR = 1;
  }
  repeated Error errors = 2;
  repeated Chat chats = 1; // pinned chats first, other chats sorted by activity.
}

message ChatEventRequest {
  oneof recipient {
    string chat_id = 2;
    string user_id = 1;
  }
  ChatEventType type = 3;
}

message ChatEventResponse {
  enum Error {
    UNKNOWN_ERROR = 0;
    INVALID_RECIPIENT_ERROR = 1;
  }
  repeated Error errors = 1;
  ChatEvent chat_event = 2;
}
